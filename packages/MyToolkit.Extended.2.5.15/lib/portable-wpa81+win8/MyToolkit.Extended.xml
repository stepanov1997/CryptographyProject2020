<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyToolkit.Extended</name>
    </assembly>
    <members>
        <member name="T:MyToolkit.Controls.ColorChooser">
            <summary>Provides a simple color chooser. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ColorChooser.SelectedColor">
            <summary>Gets or sets the selected color. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ColorChooser.Colors">
            <summary>Gets or sets the available colors in the chooser. </summary>
        </member>
        <member name="T:MyToolkit.Controls.DataGrid">
            <summary>A data grid control. </summary>
        </member>
        <member name="M:MyToolkit.Controls.DataGrid.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.DataGrid"/> class. </summary>
        </member>
        <member name="E:MyToolkit.Controls.DataGrid.SelectionChanged">
            <summary>Occurs when the selected item (row) has changed. </summary>
        </member>
        <member name="E:MyToolkit.Controls.DataGrid.OrderChanged">
            <summary>Occurs when the order of the grid has changed (column or direction). </summary>
        </member>
        <member name="E:MyToolkit.Controls.DataGrid.Navigate">
            <summary>Occurs when the user clicked on an item and wants to navigate to its detail page. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGrid.SelectedItems">
            <summary>Gets the list of currently selected items. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGrid.Items">
            <summary>Gets the currently displayed items. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGrid.SelectedColumn">
            <summary>Gets the selected column. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGrid.HeaderBackground">
            <summary>Gets or sets the header background. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGrid.SelectionMode">
            <summary>Gets or sets the selection mode (default: single). </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGrid.SelectedItem">
            <summary>Gets or sets the selected item. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGrid.ItemsSource">
            <summary>Gets or sets the items collection to show in the <see cref="T:MyToolkit.Controls.DataGrid"/>.</summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGrid.DefaultOrderIndex">
            <summary>Gets or sets the index of the column which is initially ordered.</summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGrid.RowStyle">
            <summary>Used to change the row style, the ItemContainerStyle of the internal ListBox; use ListBoxItem as style target type.</summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGrid.ItemDetailsTemplate">
            <summary>Gets or sets the data template for item details (shown when an item is selected). When null then no details are shown.</summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGrid.HeaderTemplate">
            <summary>Gets or sets the header data template (styling of column container).</summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGrid.CellTemplate">
            <summary>Gets or sets the cell data template (styling of cell container).</summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGrid.Columns">
            <summary>Gets the column description of the <see cref="T:MyToolkit.Controls.DataGrid"/>. </summary>
        </member>
        <member name="M:MyToolkit.Controls.DataGrid.SelectColumn(MyToolkit.Controls.DataGridColumnBase)">
            <summary>Selects a column for ordering. 
            If the column is not selected the the default ordering is used (IsAscendingDefault property). 
            If the column is already selected then the ordering direction will be inverted. </summary>
            <param name="column">The column. </param>
            <returns>Returns true if column could be changed. </returns>
        </member>
        <member name="M:MyToolkit.Controls.DataGrid.SelectColumn(MyToolkit.Controls.DataGridColumnBase,System.Boolean)">
            <summary>Selects a column for ordering. </summary>
            <param name="column">The column. </param>
            <param name="ascending">The value indicating whether to sort the column ascending; otherwise descending. </param>
            <returns>Returns true if column could be changed. </returns>
        </member>
        <member name="M:MyToolkit.Controls.DataGrid.SetFilter``1(System.Func{``0,System.Boolean})">
            <summary>Sets the filter on the items source. </summary>
            <typeparam name="TItem"></typeparam>
            <param name="filter"></param>
        </member>
        <member name="M:MyToolkit.Controls.DataGrid.RemoveFilter">
            <summary>Removes the current filter. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridBoundColumn.Binding">
            <summary>Gets or sets the data binding for this column. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridBoundColumn.OrderPropertyPath">
            <summary>Gets the property path which is used for sorting. </summary>
        </member>
        <member name="M:MyToolkit.Controls.DataGridCellBase.#ctor(Windows.UI.Xaml.FrameworkElement)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.DataGridCellBase"/> class. </summary>
            <param name="control">The control. </param>
        </member>
        <member name="P:MyToolkit.Controls.DataGridCellBase.Control">
            <summary>Gets the UI control of the cell. </summary>
        </member>
        <member name="M:MyToolkit.Controls.DataGridCellBase.OnSelectedChanged(System.Boolean)">
            <summary>Called when the cell's row gets selected or unselected. </summary>
            <param name="isSelected">Indicates whether the cell is selected or not. </param>
        </member>
        <member name="P:MyToolkit.Controls.DataGridColumnBase.CanSort">
            <summary>Gets or sets a value indicating whether the column can be sorted. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridColumnBase.IsSelected">
            <summary>Gets a value indicating whether the the column is selected and used for sorting. 
            This property should not be set directly, use the SelectColumn method on <see cref="T:MyToolkit.Controls.DataGrid"/>. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridColumnBase.IsAscending">
            <summary>Gets a value indicating whether the column is sorted ascending (otherwise descending). 
            This property should not be set directly, use the SelectColumn method on <see cref="T:MyToolkit.Controls.DataGrid"/>. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridColumnBase.IsAscendingDefault">
            <summary>Gets or sets a value indicating whether ascending sorting is default 
            (first click on the column will sort it ascending, otherwise descending). </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridColumnBase.Header">
            <summary>Gets or sets the header. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridColumnBase.Width">
            <summary>Gets or sets the width of the column. </summary>
        </member>
        <member name="M:MyToolkit.Controls.DataGridColumnBase.CreateCell(MyToolkit.Controls.DataGrid,System.Object)">
            <summary>Generates the cell for the given item. </summary>
            <param name="dataGrid">The data grid.</param>
            <param name="dataItem">The item to generate the cell for. </param>
            <returns>The <see cref="T:MyToolkit.Controls.DataGridCellBase"/>. </returns>
        </member>
        <member name="P:MyToolkit.Controls.DataGridColumnBase.OrderPropertyPath">
            <summary>Gets the property path which is used for sorting. </summary>
        </member>
        <member name="M:MyToolkit.Controls.DataGridColumnBase.CreateGridColumnDefinition">
            <summary>Creates a new column definition </summary>
            <returns>The column definition. </returns>
        </member>
        <member name="T:MyToolkit.Controls.DataGridColumnCollection">
            <summary>A typed observable collection of <see cref="T:MyToolkit.Controls.DataGridColumnBase"/> items. </summary>
        </member>
        <member name="F:MyToolkit.Controls.DataGridExtensions.UseSingleSelectionAndDeselectionProperty">
            <summary>Gets or sets a value indicating whether to allow only a single selection which can be deselected.</summary>
        </member>
        <member name="M:MyToolkit.Controls.DataGridExtensions.GetUseSingleSelectionAndDeselection(Windows.UI.Xaml.DependencyObject)">
            <summary>Gets a value indicating whether to allow only a single selection which can be deselected.</summary>
            <param name="obj">The <see cref="T:Windows.UI.Xaml.DependencyObject"/>. </param>
            <returns>The value. </returns>
        </member>
        <member name="M:MyToolkit.Controls.DataGridExtensions.SetUseSingleSelectionAndDeselection(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>Sets a value indicating whether to allow only a single selection which can be deselected.</summary>
            <param name="obj">The <see cref="T:Windows.UI.Xaml.DependencyObject"/>. </param>
            <param name="value">The value. </param>
        </member>
        <member name="P:MyToolkit.Controls.DataGridOrderChangedEventArgs.Column">
            <summary>Gets ordering column. </summary>
        </member>
        <member name="T:MyToolkit.Controls.DataGridRow">
            <summary>A <see cref="P:MyToolkit.Controls.DataGridRow.DataGrid"/> row. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridRow.DataGrid">
            <summary>Gets the parent <see cref="P:MyToolkit.Controls.DataGridRow.DataGrid"/>. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridRow.Item">
            <summary>Gets or sets the associated item. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridRow.IsSelected">
            <summary>Gets a value indicating whether the row is selected. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridRow.Cells">
            <summary>Gets the list of <see cref="T:MyToolkit.Controls.DataGridCellBase"/>. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridTemplatedCell.OnlyVisibleOnSelection">
            <summary>Gets or sets a value indicating whether the cell is only visible when the row is selected.</summary>
        </member>
        <member name="M:MyToolkit.Controls.DataGridTemplatedCell.OnSelectedChanged(System.Boolean)">
            <summary>Called when the cell's row gets selected or unselected. </summary>
            <param name="isSelected">Indicates whether the cell is selected or not. </param>
        </member>
        <member name="P:MyToolkit.Controls.DataGridTemplatedColumn.CellTemplate">
            <summary>Gets or sets the cell data template. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridTemplatedColumn.Order">
            <summary>Gets or sets the binding which is used for sorting. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridTemplatedColumn.OrderPropertyPath">
            <summary>Gets the property path which is used for sorting. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridTemplatedColumn.OnlyVisibleOnSelection">
            <summary>Gets or sets a value indicating whether the column is only visible when the column is selected.  </summary>
        </member>
        <member name="M:MyToolkit.Controls.DataGridTemplatedColumn.CreateCell(MyToolkit.Controls.DataGrid,System.Object)">
            <summary>Generates the cell for the given item.</summary>
            <param name="dataGrid">The data grid.</param>
            <param name="dataItem">The item to generate the cell for.</param>
            <returns>The <see cref="T:MyToolkit.Controls.DataGridCellBase" />.</returns>
        </member>
        <member name="P:MyToolkit.Controls.DataGridTextColumn.Style">
            <summary>Gets or sets the style.</summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridTextColumn.FontSize">
            <summary>Gets or sets the size of the font.</summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridTextColumn.FontStyle">
            <summary>Gets or sets the font style. </summary>
        </member>
        <member name="P:MyToolkit.Controls.DataGridTextColumn.Foreground">
            <summary>Gets or sets the foreground brush.</summary>
        </member>
        <member name="M:MyToolkit.Controls.DataGridTextColumn.CreateCell(MyToolkit.Controls.DataGrid,System.Object)">
            <summary>Generates the cell for the given item. </summary>
            <param name="dataGrid"></param>
            <param name="dataItem">The item to generate the cell for. </param>
            <returns>The <see cref="T:MyToolkit.Controls.DataGridCellBase"/>. </returns>
        </member>
        <member name="M:MyToolkit.Controls.DefaultDataGridCell.OnSelectedChanged(System.Boolean)">
            <summary>Called when the cell's row gets selected or unselected.</summary>
            <param name="isSelected">Indicates whether the cell is selected or not.</param>
        </member>
        <member name="T:MyToolkit.Controls.Html.Generators.EmGenerator">
            <summary>Generates the UI element for an EM HTML tag.</summary>
        </member>
        <member name="M:MyToolkit.Controls.Html.Generators.EmGenerator.CreateControls(MyToolkit.Html.HtmlNode,MyToolkit.Controls.Html.IHtmlView)">
            <summary>Creates the UI elements for the given HTML node and HTML view.</summary>
            <param name="node">The HTML node.</param>
            <param name="htmlView">The HTML view.</param>
            <returns>The UI elements.</returns>
        </member>
        <member name="T:MyToolkit.Controls.Html.Generators.EmptyGenerator">
            <summary>Generates no UI control.</summary>
        </member>
        <member name="M:MyToolkit.Controls.Html.Generators.EmptyGenerator.CreateControls(MyToolkit.Html.HtmlNode,MyToolkit.Controls.Html.IHtmlView)">
            <summary>Creates the UI elements for the given HTML node and HTML view.</summary>
            <param name="node">The HTML node.</param>
            <param name="textBlock">The HTML view.</param>
            <returns>The UI elements.</returns>
        </member>
        <member name="T:MyToolkit.Controls.Html.Generators.HtmlGenerator">
            <summary>Generates the UI element for the HTML tag.</summary>
        </member>
        <member name="M:MyToolkit.Controls.Html.Generators.HtmlGenerator.CreateControls(MyToolkit.Html.HtmlNode,MyToolkit.Controls.Html.IHtmlView)">
            <summary>Creates the UI elements for the given HTML node and HTML view.</summary>
            <param name="node">The HTML node.</param>
            <param name="textBlock">The HTML view.</param>
            <returns>The UI elements.</returns>
        </member>
        <member name="T:MyToolkit.Controls.Html.Generators.ImageGenerator">
            <summary>Generates the UI element for an image (img) HTML tag.</summary>
        </member>
        <member name="M:MyToolkit.Controls.Html.Generators.ImageGenerator.CreateControl(MyToolkit.Html.HtmlNode,MyToolkit.Controls.Html.IHtmlView)">
            <summary>Creates a single UI element for the given HTML node and HTML view.</summary>
            <param name="node">The node.</param>
            <param name="htmlView">The text block.</param>
            <returns>The UI element.</returns>
        </member>
        <member name="T:MyToolkit.Controls.Html.Generators.LinkGenerator">
            <summary>Generates the UI element for a link (a) HTML element.</summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.Generators.LinkGenerator.Foreground">
            <summary>Gets or sets the text foreground brush (default: blue).</summary>
        </member>
        <member name="M:MyToolkit.Controls.Html.Generators.LinkGenerator.CreateControls(MyToolkit.Html.HtmlNode,MyToolkit.Controls.Html.IHtmlView)">
            <summary>Creates the UI elements for the given HTML node and HTML view.</summary>
            <param name="node">The HTML node.</param>
            <param name="htmlView">The HTML view.</param>
            <returns>The UI elements.</returns>
        </member>
        <member name="M:MyToolkit.Controls.Html.Generators.LinkGenerator.CreateLinkAction(Windows.UI.Xaml.Documents.Hyperlink,System.String,MyToolkit.Controls.Html.IHtmlView)">
            <summary>Creates the action to open the link after the user clicked on it.</summary>
            <param name="hyperlink">The hyperlink.</param>
            <param name="link">The link.</param>
            <param name="textBlock">The text block.</param>
            <returns>The action</returns>
        </member>
        <member name="T:MyToolkit.Controls.Html.Generators.ParagraphGenerator">
            <summary>Generates the UI element for a paragraph (p) HTML element.</summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.Generators.ParagraphGenerator.FontSize">
            <summary>Gets or sets the size of the font in percent of the HTML view's font size (default: 1.0 = 100%).</summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.Generators.ParagraphGenerator.FontFamily">
            <summary>Gets or sets the font family.</summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.Generators.ParagraphGenerator.Foreground">
            <summary>Gets or sets the foreground.</summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.Generators.ParagraphGenerator.FontStyle">
            <summary>Gets or sets the font style.</summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.Generators.ParagraphGenerator.FontWeight">
            <summary>Gets or sets the font weight.</summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.Generators.ParagraphGenerator.UseTextSplitting">
            <summary>Gets or sets a value indicating whether the text should be split up in multiple RichTextBlocks to avoid the 2048px element size limit (default: true).</summary>
        </member>
        <member name="M:MyToolkit.Controls.Html.Generators.ParagraphGenerator.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.Html.Generators.ParagraphGenerator"/> class.</summary>
        </member>
        <member name="M:MyToolkit.Controls.Html.Generators.ParagraphGenerator.CreateControls(MyToolkit.Html.HtmlNode,MyToolkit.Controls.Html.IHtmlView)">
            <summary>Creates the UI elements for the given HTML node and HTML view.</summary>
            <param name="node">The HTML node.</param>
            <param name="htmlView">The HTML view.</param>
            <returns>The UI elements.</returns>
        </member>
        <member name="M:MyToolkit.Controls.Html.Generators.ParagraphGenerator.CreateTextBlock(MyToolkit.Html.HtmlNode,MyToolkit.Controls.Html.IHtmlView)">
            <summary>Creates a formatted text block.</summary>
            <param name="node">The node.</param>
            <param name="htmlView">The HTML view.</param>
        </member>
        <member name="T:MyToolkit.Controls.Html.Generators.StrongGenerator">
            <summary>Generates the UI element for a strong/b element.</summary>
        </member>
        <member name="M:MyToolkit.Controls.Html.Generators.StrongGenerator.CreateControls(MyToolkit.Html.HtmlNode,MyToolkit.Controls.Html.IHtmlView)">
            <summary>Creates the UI elements for the given HTML node and HTML view.</summary>
            <param name="node">The HTML node.</param>
            <param name="htmlView">The HTML view.</param>
            <returns>The UI elements.</returns>
        </member>
        <member name="T:MyToolkit.Controls.Html.Generators.TextGenerator">
            <summary>Generates the UI element for a HTML text node.</summary>
        </member>
        <member name="M:MyToolkit.Controls.Html.Generators.TextGenerator.CreateControl(MyToolkit.Html.HtmlNode,MyToolkit.Controls.Html.IHtmlView)">
            <summary>Creates a single UI element for the given HTML node and HTML view.</summary>
            <param name="node">The node.</param>
            <param name="htmlView">The text block.</param>
            <returns>The UI element.</returns>
        </member>
        <member name="T:MyToolkit.Controls.Html.Generators.UlGenerator">
            <summary>Generator for the UL HTML element (unordered list).</summary>
        </member>
        <member name="M:MyToolkit.Controls.Html.Generators.UlGenerator.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.Html.Generators.UlGenerator"/> class.</summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.Generators.UlGenerator.BulletSymbol">
            <summary>Gets or sets the bullet symbol for a list element.</summary>
        </member>
        <member name="M:MyToolkit.Controls.Html.Generators.UlGenerator.CreateControls(MyToolkit.Html.HtmlNode,MyToolkit.Controls.Html.IHtmlView)">
            <summary>Creates the UI elements for the given HTML node and HTML view.</summary>
            <param name="node">The HTML node.</param>
            <param name="htmlView">The HTML view.</param>
            <returns>The UI elements.</returns>
        </member>
        <member name="M:MyToolkit.Controls.Html.HtmlNodeExtensions.GetControls(MyToolkit.Html.HtmlNode,MyToolkit.Controls.Html.IHtmlView)">
            <exception cref="T:System.InvalidOperationException">Control generator returned null.</exception>
        </member>
        <member name="T:MyToolkit.Controls.Html.HtmlViewHelper">
            <summary>Common HTML view helper methods.</summary>
        </member>
        <member name="M:MyToolkit.Controls.Html.HtmlViewHelper.GetDefaultGenerators(Windows.UI.Xaml.FrameworkElement)">
            <summary>Creates the default UI element generators.</summary>
            <param name="view">The view.</param>
            <returns>The generators.</returns>
        </member>
        <member name="T:MyToolkit.Controls.Html.IControlGenerator">
            <summary>The interface of a control generator.</summary>
        </member>
        <member name="M:MyToolkit.Controls.Html.IControlGenerator.CreateControls(MyToolkit.Html.HtmlNode,MyToolkit.Controls.Html.IHtmlView)">
            <summary>Creates the UI elements for the given HTML node and HTML view.</summary>
            <param name="node">The HTML node.</param>
            <param name="htmlView">The HTML view.</param>
            <returns>The UI elements.</returns>
        </member>
        <member name="T:MyToolkit.Controls.Html.IHtmlView">
            <summary>Describes the interface of a HTML rendering control. </summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.IHtmlView.Html">
            <summary>Gets or sets the HTML content to display. </summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.IHtmlView.Generators">
            <summary>Gets the list of HTML element generators. </summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.IHtmlView.SizeDependentControls">
            <summary>Gets the list of size dependent controls. </summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.IHtmlView.HtmlBaseUri">
            <summary>Gets or sets the base URI which is used to resolve relative URIs. </summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.IHtmlView.ParagraphMargin">
            <summary>Gets or sets the margin for paragraphs (added at the bottom of the element). </summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.IHtmlView.Foreground">
            <summary>Gets or sets a brush that describes the foreground color. </summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.IHtmlView.Background">
            <summary>Gets or sets a brush that describes the background of a control. </summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.IHtmlView.FontSize">
            <summary>Gets or sets the font size. </summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.IHtmlView.FontFamily">
            <summary>Gets or sets the font family of the control. </summary>
        </member>
        <member name="P:MyToolkit.Controls.Html.IHtmlView.ActualWidth">
            <summary>Gets the rendered width of this element. </summary>
        </member>
        <member name="T:MyToolkit.Controls.Html.ISizeDependentControl">
            <summary>The interface of a size independent control.</summary>
        </member>
        <member name="M:MyToolkit.Controls.Html.ISizeDependentControl.Update(System.Double)">
            <summary>Called when the HTML view's with changed and the size dependent control should fit the new width.</summary>
            <param name="actualWidth">The actual width of the HTML view.</param>
        </member>
        <member name="T:MyToolkit.Controls.Html.SingleControlGenerator">
            <summary>Generator for a single UI element for a given HTML node.</summary>
        </member>
        <member name="M:MyToolkit.Controls.Html.SingleControlGenerator.CreateControls(MyToolkit.Html.HtmlNode,MyToolkit.Controls.Html.IHtmlView)">
            <summary>Creates the UI elements for the given HTML node and HTML view.</summary>
            <param name="node">The HTML node.</param>
            <param name="htmlView">The HTML view.</param>
            <returns>The UI elements.</returns>
        </member>
        <member name="M:MyToolkit.Controls.Html.SingleControlGenerator.CreateControl(MyToolkit.Html.HtmlNode,MyToolkit.Controls.Html.IHtmlView)">
            <summary>Creates a single UI element for the given HTML node and HTML view.</summary>
            <param name="node">The node.</param>
            <param name="htmlView">The HTML view.</param>
            <returns>The UI element.</returns>
        </member>
        <member name="T:MyToolkit.Controls.HtmlView">
            <summary>Renders HTML using native XAML controls without a scrollbar; use the  <see cref="T:MyToolkit.Controls.ScrollableHtmlView"/> 
            control to render the HTML content in a <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer"/>. </summary>
        </member>
        <member name="M:MyToolkit.Controls.HtmlView.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.HtmlView"/> class. </summary>
        </member>
        <member name="P:MyToolkit.Controls.HtmlView.Generators">
            <summary>Gets the list of HTML element generators. </summary>
        </member>
        <member name="P:MyToolkit.Controls.HtmlView.SizeDependentControls">
            <summary>Gets the list of size dependent controls. </summary>
        </member>
        <member name="P:MyToolkit.Controls.HtmlView.Html">
            <summary>Gets or sets the HTML content to display. </summary>
        </member>
        <member name="E:MyToolkit.Controls.HtmlView.HtmlLoaded">
            <summary>Occurs when the HTML content has been loaded. </summary>
        </member>
        <member name="P:MyToolkit.Controls.HtmlView.ParagraphMargin">
            <summary>Gets or sets the margin for paragraphs (added at the bottom of the element). </summary>
        </member>
        <member name="P:MyToolkit.Controls.HtmlView.HtmlBaseUri">
            <summary>Gets or sets the base URI which is used to resolve relative URIs. </summary>
        </member>
        <member name="M:MyToolkit.Controls.HtmlView.GetGenerator``1(System.String)">
            <summary>Gets the generator for the tag name or creates a new one.</summary>
            <typeparam name="TGenerator">The type of the generator.</typeparam>
            <param name="tagName">Name of the tag.</param>
            <returns>The generator.</returns>
        </member>
        <member name="M:MyToolkit.Controls.HtmlView.Refresh">
            <summary>Refreshes the rendered HTML (should be called when changing the generators).</summary>
        </member>
        <member name="M:MyToolkit.Controls.HtmlView.OnHtmlLoaded">
            <summary>Calls the <see cref="E:MyToolkit.Controls.HtmlView.HtmlLoaded"/> event. </summary>
        </member>
        <member name="T:MyToolkit.Controls.ScrollableHtmlView">
            <summary>Renders HTML using native XAML controls in a scrollbar; use the control <see cref="T:MyToolkit.Controls.HtmlView"/> 
            to render the HTML content without a <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer"/>. </summary>
        </member>
        <member name="M:MyToolkit.Controls.ScrollableHtmlView.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.ScrollableHtmlView"/> class. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrollableHtmlView.Generators">
            <summary>Gets the list of HTML element generators. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrollableHtmlView.SizeDependentControls">
            <summary>Gets the list of size dependent controls. </summary>
        </member>
        <member name="E:MyToolkit.Controls.ScrollableHtmlView.HtmlLoaded">
            <summary>Occurs when the HTML content has been loaded. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrollableHtmlView.Html">
            <summary>Gets or sets the HTML content to display. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrollableHtmlView.ParagraphMargin">
            <summary>Gets or sets the margin for paragraphs (added at the bottom of the element). </summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrollableHtmlView.HtmlBaseUri">
            <summary>Gets or sets the base URI which is used to resolve relative URIs. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrollableHtmlView.HeaderTemplate">
            <summary>Gets or sets the header template. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrollableHtmlView.ShowHeader">
            <summary>Gets or sets a value indicating whether the header should be shown. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrollableHtmlView.FooterTemplate">
            <summary>Gets or sets the footer template. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrollableHtmlView.InnerMaxWidth">
            <summary>Gets or sets the maximum width of the elements in the scroll viewer.</summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrollableHtmlView.ShowFooter">
            <summary>Gets or sets a value indicating whether the footer should be shown. </summary>
        </member>
        <member name="M:MyToolkit.Controls.ScrollableHtmlView.GetGenerator``1(System.String)">
            <summary>Gets the generator for the tag name or creates a new one.</summary>
            <typeparam name="TGenerator">The type of the generator.</typeparam>
            <param name="tagName">Name of the tag.</param>
            <returns>The generator.</returns>
        </member>
        <member name="M:MyToolkit.Controls.ScrollableHtmlView.Refresh">
            <summary>Refreshes the rendered HTML (should be called when changing the generators).</summary>
        </member>
        <member name="M:MyToolkit.Controls.ScrollableHtmlView.OnApplyTemplate">
            <summary>Attaches a binding to a FrameworkElement, using the provided binding object.</summary>
        </member>
        <member name="T:MyToolkit.Controls.ItemsWrapGridExtensions">
            <summary>Attached property extensions for the <see cref="T:Windows.UI.Xaml.Controls.ItemsWrapGrid"/>.</summary>
        </member>
        <member name="T:MyToolkit.Controls.LongListSelector">
            <summary>Implementation of the <see cref="T:MyToolkit.Controls.LongListSelector"/> with native look and feel. </summary>
        </member>
        <member name="M:MyToolkit.Controls.LongListSelector.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.LongListSelector"/> class. </summary>
        </member>
        <member name="E:MyToolkit.Controls.LongListSelector.Navigate">
            <summary>Occurs when the user wants to navigate to an item. </summary>
        </member>
        <member name="P:MyToolkit.Controls.LongListSelector.ItemsSource">
            <summary>Gets or sets the item source (usually an <see cref="T:MyToolkit.Collections.AlphaGroupCollection`1"/> object). </summary>
        </member>
        <member name="P:MyToolkit.Controls.LongListSelector.ItemTemplate">
            <summary>Gets or sets the item template for rendering an item. </summary>
        </member>
        <member name="P:MyToolkit.Controls.LongListSelector.UseNavigationEvent">
            <summary>Gets or sets a value indicating whether the <see cref="E:MyToolkit.Controls.LongListSelector.Navigate"/> event should be triggered
            when clicking on an item (default: true). </summary>
        </member>
        <member name="T:MyToolkit.Controls.MtGridView">
            <summary>A <see cref="T:Windows.UI.Xaml.Controls.GridView"/> with additional features. </summary>
        </member>
        <member name="M:MyToolkit.Controls.MtGridView.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.MtGridView"/> class. </summary>
        </member>
        <member name="P:MyToolkit.Controls.MtGridView.ScrollViewer">
            <summary>Gets the view's <see cref="P:MyToolkit.Controls.MtGridView.ScrollViewer"/>. </summary>
        </member>
        <member name="P:MyToolkit.Controls.MtGridView.TriggerScrolledToEndEvents">
            <summary>Gets or sets a value indicating whether scrolled to end events should be triggered. </summary>
        </member>
        <member name="E:MyToolkit.Controls.MtGridView.ScrolledToEnd">
            <summary>Occurs when the user scrolled to the end of the view. </summary>
        </member>
        <member name="E:MyToolkit.Controls.MtGridView.PrepareContainerForItem">
            <summary>Occurs when a new container control gets created. </summary>
        </member>
        <member name="T:MyToolkit.Controls.ExtendedGridView">
            <summary>A <see cref="T:Windows.UI.Xaml.Controls.GridView"/> with additional features. </summary>
        </member>
        <member name="T:MyToolkit.Controls.MtItemsControl">
            <summary>A <see cref="T:Windows.UI.Xaml.Controls.ItemsControl"/> with additional features. </summary>
        </member>
        <member name="E:MyToolkit.Controls.MtItemsControl.PrepareContainerForItem">
            <summary>Occurs when a container for an item gets prepared. </summary>
        </member>
        <member name="T:MyToolkit.Controls.ExtendedItemsControl">
            <summary>A <see cref="T:Windows.UI.Xaml.Controls.ItemsControl"/> with additional features. </summary>
        </member>
        <member name="T:MyToolkit.Controls.MtListBox">
            <summary>A <see cref="T:Windows.UI.Xaml.Controls.ListBox"/> with additional features. </summary>
        </member>
        <member name="M:MyToolkit.Controls.MtListBox.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.MtListBox"/> class. </summary>
        </member>
        <member name="M:MyToolkit.Controls.MtListBox.GetListBoxItemFromItem(System.Object)">
            <summary>Gets the <see cref="T:Windows.UI.Xaml.Controls.ListBoxItem"/> for a given item. </summary>
            <param name="item">The item. </param>
            <returns>The <see cref="T:Windows.UI.Xaml.Controls.ListBoxItem"/>. </returns>
        </member>
        <member name="P:MyToolkit.Controls.MtListBox.ScrollViewer">
            <summary>Gets the view's <see cref="P:MyToolkit.Controls.MtListBox.ScrollViewer"/>. </summary>
        </member>
        <member name="M:MyToolkit.Controls.MtListBox.ScrollToVerticalOffset(System.Double)">
            <summary>Scrolls to the given offset. </summary>
            <param name="offset">The offset. </param>
            <returns>Returns false if the <see cref="P:MyToolkit.Controls.MtListBox.ScrollViewer"/> was not loaded. </returns>
        </member>
        <member name="M:MyToolkit.Controls.MtListBox.StopScrolling">
            <summary>Stops the current scrolling. </summary>
            <returns>Returns false if the <see cref="P:MyToolkit.Controls.MtListBox.ScrollViewer"/> was not loaded. </returns>
        </member>
        <member name="P:MyToolkit.Controls.MtListBox.TriggerScrolledToEndEvents">
            <summary>Gets or sets a value indicating whether scrolled to end events should be triggered. </summary>
        </member>
        <member name="E:MyToolkit.Controls.MtListBox.ScrolledToEnd">
            <summary>Occurs when the user scrolled to the end of the view. </summary>
        </member>
        <member name="P:MyToolkit.Controls.MtListBox.InnerMargin">
            <summary>Gets or sets the inner margin. </summary>
        </member>
        <member name="E:MyToolkit.Controls.MtListBox.PrepareContainerForItem">
            <summary>Occurs when a new container control gets created. </summary>
        </member>
        <member name="E:MyToolkit.Controls.MtListBox.ScrollingStateChanged">
            <summary>Occurs when the scrolling state changed. </summary>
        </member>
        <member name="P:MyToolkit.Controls.MtListBox.IsScrolling">
            <summary>Gets a value indicating whether the user is currently scrolling the view. </summary>
        </member>
        <member name="M:MyToolkit.Controls.MtListBox.IsScrollingPropertyChanged(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">The IsScrolling property is read-only. </exception>
        </member>
        <member name="T:MyToolkit.Controls.ExtendedListBox">
            <summary>A <see cref="T:Windows.UI.Xaml.Controls.ListBox"/> with additional features. </summary>
        </member>
        <member name="T:MyToolkit.Controls.ScrollingStateChangedEventArgs">
            <summary>Contains information for the scrolling state changed event. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrollingStateChangedEventArgs.OldValue">
            <summary>Gets the old scrolling state. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrollingStateChangedEventArgs.NewValue">
            <summary>Gets the new scrolling state. </summary>
        </member>
        <member name="M:MyToolkit.Controls.ScrollingStateChangedEventArgs.#ctor(System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.ScrollingStateChangedEventArgs"/> class. </summary>
        </member>
        <member name="T:MyToolkit.Controls.ScrolledToEndEventArgs">
            <summary>Contains information for the scrolled to end event. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrolledToEndEventArgs.ScrollViewer">
            <summary>Gets the involved scroll viewer. </summary>
        </member>
        <member name="M:MyToolkit.Controls.ScrolledToEndEventArgs.#ctor(Windows.UI.Xaml.Controls.ScrollViewer)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.ScrolledToEndEventArgs"/> class. </summary>
        </member>
        <member name="T:MyToolkit.Controls.MtListView">
            <summary>A <see cref="T:Windows.UI.Xaml.Controls.ListView"/> with additional features. </summary>
        </member>
        <member name="M:MyToolkit.Controls.MtListView.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.MtListView"/> class. </summary>
        </member>
        <member name="T:MyToolkit.Controls.ExtendedListView">
            <summary>A <see cref="T:Windows.UI.Xaml.Controls.ListView"/> with additional features. </summary>
        </member>
        <member name="T:MyToolkit.Controls.MtPivot">
            <summary>A pivot control for WinRT. </summary>
        </member>
        <member name="M:MyToolkit.Controls.MtPivot.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.MtPivot"/> class. </summary>
        </member>
        <member name="P:MyToolkit.Controls.MtPivot.IsHeaderEnabled">
            <summary>Gets or sets a value indicating whether the header is enabled and can be interacted with.</summary>
        </member>
        <member name="E:MyToolkit.Controls.MtPivot.SelectionChanged">
            <summary>Occurs when the selected pivot changed. </summary>
        </member>
        <member name="P:MyToolkit.Controls.MtPivot.Items">
            <summary>Gets the list of <see cref="T:MyToolkit.Controls.MtPivotItem"/> objects. </summary>
        </member>
        <member name="P:MyToolkit.Controls.MtPivot.HeaderTemplate">
            <summary>Gets or sets the header template. </summary>
        </member>
        <member name="P:MyToolkit.Controls.MtPivot.SelectedItem">
            <summary>Gets or sets the current visible <see cref="T:MyToolkit.Controls.MtPivotItem"/>. </summary>
        </member>
        <member name="P:MyToolkit.Controls.MtPivot.SelectedIndex">
            <summary>Gets or sets the index of the currently selected <see cref="T:MyToolkit.Controls.MtPivotItem"/>. </summary>
        </member>
        <member name="E:MyToolkit.Controls.NavigationGridView.Navigate">
            <summary>Occurs when the user wants to navigate to an item. </summary>
        </member>
        <member name="E:MyToolkit.Controls.NavigationList.Navigate">
            <summary>Occurs when the user wants to navigate to an item. </summary>
        </member>
        <member name="P:MyToolkit.Controls.NavigationListEventArgs.Item">
            <summary>Gets the item to navigate to. </summary>
        </member>
        <member name="M:MyToolkit.Controls.NavigationListEventArgs.GetItem``1">
            <summary>Gets the item to naviate to and casts it to the given generic type. </summary>
            <typeparam name="T">The item type. </typeparam>
            <returns>The item. </returns>
        </member>
        <member name="E:MyToolkit.Controls.NavigationListView.Navigate">
            <summary>Occurs when the user wants to navigate to an item. </summary>
        </member>
        <member name="T:MyToolkit.Controls.OrientedSize">
            <summary>
            The OrientedSize structure is used to abstract the growth direction from
            the layout algorithms of WrapPanel.  When the growth direction is
            oriented horizontally (ex: the next element is arranged on the side of
            the previous element), then the Width grows directly with the placement
            of elements and Height grows indirectly with the size of the largest
            element in the row.  When the orientation is reversed, so is the
            directional growth with respect to Width and Height.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:MyToolkit.Controls.OrientedSize._orientation">
            <summary>
            The orientation of the structure.
            </summary>
        </member>
        <member name="P:MyToolkit.Controls.OrientedSize.Orientation">
            <summary>
            Gets the orientation of the structure.
            </summary>
        </member>
        <member name="F:MyToolkit.Controls.OrientedSize._direct">
            <summary>
            The size dimension that grows directly with layout placement.
            </summary>
        </member>
        <member name="P:MyToolkit.Controls.OrientedSize.Direct">
            <summary>
            Gets or sets the size dimension that grows directly with layout
            placement.
            </summary>
        </member>
        <member name="F:MyToolkit.Controls.OrientedSize._indirect">
            <summary>
            The size dimension that grows indirectly with the maximum value of
            the layout row or column.
            </summary>
        </member>
        <member name="P:MyToolkit.Controls.OrientedSize.Indirect">
            <summary>
            Gets or sets the size dimension that grows indirectly with the
            maximum value of the layout row or column.
            </summary>
        </member>
        <member name="P:MyToolkit.Controls.OrientedSize.Width">
            <summary>
            Gets or sets the width of the size.
            </summary>
        </member>
        <member name="P:MyToolkit.Controls.OrientedSize.Height">
            <summary>
            Gets or sets the height of the size.
            </summary>
        </member>
        <member name="M:MyToolkit.Controls.OrientedSize.#ctor(Windows.UI.Xaml.Controls.Orientation)">
            <summary>
            Initializes a new OrientedSize structure.
            </summary>
            <param name="orientation">Orientation of the structure.</param>
        </member>
        <member name="M:MyToolkit.Controls.OrientedSize.#ctor(Windows.UI.Xaml.Controls.Orientation,System.Double,System.Double)">
            <summary>
            Initializes a new OrientedSize structure.
            </summary>
            <param name="orientation">Orientation of the structure.</param>
            <param name="width">Un-oriented width of the structure.</param>
            <param name="height">Un-oriented height of the structure.</param>
        </member>
        <member name="T:MyToolkit.Controls.PivotExtensions">
            <summary>Attached properties for (Windows Phone's) Pivot control. </summary>
        </member>
        <member name="M:MyToolkit.Controls.PivotExtensions.SetDisableAutoMargin(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>Sets a value indicating whether the automatic margin on a Windows Phone Pivot control should be disabled. </summary>
            <remarks>When this is set to <c>true</c>, the Pivot's template cannot be changed. 
            Use this property only on Windows Phone Pivot controls. </remarks>
            <param name="element">The element. </param>
            <param name="value">The value. </param>
        </member>
        <member name="M:MyToolkit.Controls.PivotExtensions.GetDisableAutoMargin(Windows.UI.Xaml.DependencyObject)">
            <summary>Gets a value indicating whether the automatic margin on a Windows Phone Pivot control should be disabled. </summary>
            <param name="element">The element. </param>
        </member>
        <member name="T:MyToolkit.Controls.ScrollableItemsControl">
            <summary>A list of items in a <see cref="P:MyToolkit.Controls.ScrollableItemsControl.ScrollViewer"/> with no selection support. </summary>
        </member>
        <member name="M:MyToolkit.Controls.ScrollableItemsControl.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.ScrollableItemsControl"/> class. </summary>
        </member>
        <member name="M:MyToolkit.Controls.ScrollableItemsControl.GetListBoxItemFromItem(System.Object)">
            <summary>Gets the <see cref="T:Windows.UI.Xaml.Controls.ListBoxItem"/> for a given item. </summary>
            <param name="item">The item. </param>
            <returns>The <see cref="T:Windows.UI.Xaml.Controls.ListBoxItem"/>. </returns>
        </member>
        <member name="P:MyToolkit.Controls.ScrollableItemsControl.ScrollViewer">
            <summary>Gets the view's <see cref="P:MyToolkit.Controls.ScrollableItemsControl.ScrollViewer"/>. </summary>
        </member>
        <member name="M:MyToolkit.Controls.ScrollableItemsControl.ScrollToVerticalOffset(System.Double)">
            <summary>Scrolls to the given offset. </summary>
            <param name="offset">The offset. </param>
            <returns>Returns false if the <see cref="P:MyToolkit.Controls.ScrollableItemsControl.ScrollViewer"/> was not loaded. </returns>
        </member>
        <member name="M:MyToolkit.Controls.ScrollableItemsControl.StopScrolling">
            <summary>Stops the current scrolling. </summary>
            <returns>Returns false if the <see cref="P:MyToolkit.Controls.ScrollableItemsControl.ScrollViewer"/> was not loaded. </returns>
        </member>
        <member name="M:MyToolkit.Controls.ScrollableItemsControl.OnApplyTemplate">
            <summary>Attaches a binding to a FrameworkElement, using the provided binding object.</summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrollableItemsControl.TriggerScrolledToEndEvents">
            <summary>Gets or sets a value indicating whether scrolled to end events should be triggered. </summary>
        </member>
        <member name="E:MyToolkit.Controls.ScrollableItemsControl.ScrolledToEnd">
            <summary>Occurs when the user scrolled to the end of the view. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrollableItemsControl.InnerMargin">
            <summary>Gets or sets the inner margin. </summary>
        </member>
        <member name="E:MyToolkit.Controls.ScrollableItemsControl.PrepareContainerForItem">
            <summary>Occurs when a new container control gets created. </summary>
        </member>
        <member name="E:MyToolkit.Controls.ScrollableItemsControl.ScrollingStateChanged">
            <summary>Occurs when the scrolling state changed. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrollableItemsControl.IsScrolling">
            <summary>Gets a value indicating whether the user is currently scrolling the view. </summary>
        </member>
        <member name="M:MyToolkit.Controls.ScrollableItemsControl.IsScrollingPropertyChanged(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">The IsScrolling property is read-only. </exception>
        </member>
        <member name="T:MyToolkit.Controls.SuppressTappedPresenter">
            <summary>Control which suppresses all tapped events. </summary>
        </member>
        <member name="M:MyToolkit.Controls.SuppressTappedPresenter.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.SuppressTappedPresenter"/> class. </summary>
        </member>
        <member name="T:MyToolkit.Controls.UniformGrid">
            <summary>Panel which arranges children in a grid with all equal cell sizes. </summary>
        </member>
        <member name="T:MyToolkit.Controls.WrapPanel">
            <summary>
            Positions child elements sequentially from left to right or top to
            bottom.  When elements extend beyond the panel edge, elements are
            positioned in the next row or column.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:MyToolkit.Controls.WrapPanel._ignorePropertyChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="P:MyToolkit.Controls.WrapPanel.ItemHeight">
            <summary>
            Gets or sets the height of the layout area for each item that is
            contained in a <see cref="T:MyToolkit.Controls.WrapPanel" />.
            </summary>
            <value>
            The height applied to the layout area of each item that is contained
            within a <see cref="T:MyToolkit.Controls.WrapPanel" />.  The
            default value is <see cref="F:System.Double.NaN" />.
            </value>
        </member>
        <member name="F:MyToolkit.Controls.WrapPanel.ItemHeightProperty">
            <summary>
            Identifies the
            <see cref="P:MyToolkit.Controls.WrapPanel.ItemHeight" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:MyToolkit.Controls.WrapPanel.ItemHeight" />
            dependency property
            </value>
        </member>
        <member name="P:MyToolkit.Controls.WrapPanel.ItemWidth">
            <summary>
            Gets or sets the width of the layout area for each item that is
            contained in a <see cref="T:MyToolkit.Controls.WrapPanel" />.
            </summary>
            <value>
            The width that applies to the layout area of each item that is
            contained in a <see cref="T:MyToolkit.Controls.WrapPanel" />.
            The default value is <see cref="F:System.Double.NaN" />.
            </value>
        </member>
        <member name="F:MyToolkit.Controls.WrapPanel.ItemWidthProperty">
            <summary>
            Identifies the
            <see cref="P:MyToolkit.Controls.WrapPanel.ItemWidth" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:MyToolkit.Controls.WrapPanel.ItemWidth" />
            dependency property.
            </value>
        </member>
        <member name="P:MyToolkit.Controls.WrapPanel.Orientation">
            <summary>
            Gets or sets the direction in which child elements are arranged.
            </summary>
            <value>
            One of the <see cref="T:Windows.UI.Xaml.Controls.Orientation" />
            values.  The default is
            <see cref="F:Windows.UI.Xaml.Controls.Orientation.Horizontal" />.
            </value>
        </member>
        <member name="F:MyToolkit.Controls.WrapPanel.OrientationProperty">
            <summary>
            Identifies the
            <see cref="P:MyToolkit.Controls.WrapPanel.Orientation" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:MyToolkit.Controls.WrapPanel.Orientation" />
            dependency property.
            </value>
        </member>
        <member name="M:MyToolkit.Controls.WrapPanel.OnOrientationPropertyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="d">WrapPanel that changed its Orientation.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:MyToolkit.Controls.WrapPanel.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:MyToolkit.Controls.WrapPanel" /> class.
            </summary>
        </member>
        <member name="M:MyToolkit.Controls.WrapPanel.OnItemHeightOrWidthPropertyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed handler for ItemHeight and ItemWidth.
            </summary>
            <param name="d">
            WrapPanel that changed its ItemHeight or ItemWidth.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:MyToolkit.Controls.WrapPanel.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Measures the child elements of a
            <see cref="T:MyToolkit.Controls.WrapPanel" /> in anticipation
            of arranging them during the
            <see cref="!:Windows.UI.Xaml.FrameworkElement.ArrangeOverride(Windows.Foundation.Size)" />
            pass.
            </summary>
            <param name="constraint">
            The size available to child elements of the wrap panel.
            </param>
            <returns>
            The size required by the
            <see cref="T:MyToolkit.Controls.WrapPanel" /> and its 
            elements.
            </returns>
        </member>
        <member name="M:MyToolkit.Controls.WrapPanel.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Arranges and sizes the
            <see cref="T:MyToolkit.Controls.WrapPanel" /> control and its
            child elements.
            </summary>
            <param name="finalSize">
            The area within the parent that the
            <see cref="T:MyToolkit.Controls.WrapPanel" /> should use 
            arrange itself and its children.
            </param>
            <returns>
            The actual size used by the
            <see cref="T:MyToolkit.Controls.WrapPanel" />.
            </returns>
        </member>
        <member name="M:MyToolkit.Controls.WrapPanel.ArrangeLine(System.Int32,System.Int32,System.Nullable{System.Double},System.Double,System.Double)">
            <summary>
            Arrange a sequence of elements in a single line.
            </summary>
            <param name="lineStart">
            Index of the first element in the sequence to arrange.
            </param>
            <param name="lineEnd">
            Index of the last element in the sequence to arrange.
            </param>
            <param name="directDelta">
            Optional fixed growth in the primary direction.
            </param>
            <param name="indirectOffset">
            Offset of the line in the indirect direction.
            </param>
            <param name="indirectGrowth">
            Shared indirect growth of the elements on this line.
            </param>
        </member>
        <member name="T:MyToolkit.Controls.NumericExtensions">
            <summary>
            Numeric utility methods used by controls.  These methods are similar in
            scope to the WPF DoubleUtil class.
            </summary>
        </member>
        <member name="T:MyToolkit.Controls.NumericExtensions.NanUnion">
            <summary>
            NanUnion is a C++ style type union used for efficiently converting
            a double into an unsigned long, whose bits can be easily
            manipulated.
            </summary>
        </member>
        <member name="F:MyToolkit.Controls.NumericExtensions.NanUnion.FloatingValue">
            <summary>
            Floating point representation of the union.
            </summary>
        </member>
        <member name="F:MyToolkit.Controls.NumericExtensions.NanUnion.IntegerValue">
            <summary>
            Integer representation of the union.
            </summary>
        </member>
        <member name="M:MyToolkit.Controls.NumericExtensions.IsZero(System.Double)">
            <summary>
            Check if a number is zero.
            </summary>
            <param name="value">The number to check.</param>
            <returns>True if the number is zero, false otherwise.</returns>
        </member>
        <member name="M:MyToolkit.Controls.NumericExtensions.IsNaN(System.Double)">
            <summary>
            Check if a number isn't really a number.
            </summary>
            <param name="value">The number to check.</param>
            <returns>
            True if the number is not a number, false if it is a number.
            </returns>
        </member>
        <member name="M:MyToolkit.Controls.NumericExtensions.IsGreaterThan(System.Double,System.Double)">
            <summary>
            Determine if one number is greater than another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is greater than the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:MyToolkit.Controls.NumericExtensions.AreClose(System.Double,System.Double)">
            <summary>
            Determine if two numbers are close in value.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is close in value to the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:MyToolkit.Controls.NumericExtensions.IsLessThanOrClose(System.Double,System.Double)">
            <summary>
            Determine if one number is less than or close to another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is less than or close to the second, false
            otherwise.
            </returns>
        </member>
        <member name="F:MyToolkit.UI.UIElementExtensions.IsVisibleProperty">
            <summary>Use this attached property only to set the visibility.</summary>
        </member>
        <member name="T:MyToolkit.UI.FrameworkElementExtensions">
            <summary>Provides extension methods for <see cref="T:Windows.UI.Xaml.FrameworkElement"/> objects. </summary>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVerticalScrollOffset(Windows.UI.Xaml.Controls.ListBox)">
            <summary>Gets the vertical offset for a ListBox</summary>
            <param name="list">The ListBox to check</param>
            <returns>The vertical offset</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetHorizontalScrollOffset(Windows.UI.Xaml.Controls.ListBox)">
            <summary>Gets the horizontal offset for a ListBox</summary>
            <param name="list">The ListBox to check</param>
            <returns>The horizontal offset</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVerticalScrollPosition(Windows.UI.Xaml.FrameworkElement)">
            <summary>Gets the vertical scroll position of the element's <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer"/>. </summary>
            <param name="element">The element which must have a <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer"/> as child. </param>
            <returns>The scroll position. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetHorizontalScrollPosition(Windows.UI.Xaml.FrameworkElement)">
            <summary>Sets the horizontal scroll position of the element's <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer"/>. </summary>
            <param name="element">The element which must have a <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer"/> as child. </param>
            <returns>The scroll position. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.SetVerticalScrollPosition(Windows.UI.Xaml.FrameworkElement,System.Double)">
            <summary>Sets the horizontal scroll position of the element's <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer"/>. </summary>
            <param name="element">The element which must have a <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer"/> as child. </param>
            <param name="position">The scroll position. </param>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.SetHorizontalScrollPosition(Windows.UI.Xaml.FrameworkElement,System.Double)">
            <summary>Gets the horizontal scroll position of the element's <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer"/>. </summary>
            <param name="element">The element which must have a <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer"/> as child. </param>
            <param name="position">The scroll position. </param>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.IsVisibleOnScreen(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>Checks whether an element which is contained in a container is currently visible on the screen. </summary>
            <param name="element">The element. </param>
            <param name="container">The element's container (e.g. a <see cref="T:Windows.UI.Xaml.Controls.ListBox"/>). </param>
            <returns>true if the element is visible to the user; false otherwise. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.FindParentDataContext(Windows.UI.Xaml.DependencyObject)">
            <summary>Finds the parent data context of the <see cref="T:Windows.UI.Xaml.DependencyObject"/> by checking the parents.</summary>
            <param name="dependencyObject">The <see cref="T:Windows.UI.Xaml.DependencyObject"/>.</param>
            <returns>The data context or <c>null</c> when no data context could be found. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetElementRect(Windows.UI.Xaml.FrameworkElement)">
            <summary>Gets the rectangle of the given <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.</summary>
            <param name="element">The element.</param>
            <returns>The rectangle. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetCanvasElementRect(Windows.UI.Xaml.FrameworkElement)">
            <summary>Gets the rectangle of the element in which is contained in a <see cref="T:Windows.UI.Xaml.Controls.Canvas"/>. </summary>
            <param name="element">The element.</param>
            <returns>The rectangle. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.FindVisualChild(Windows.UI.Xaml.FrameworkElement,System.String)">
            <summary>Finds a <see cref="T:Windows.UI.Xaml.FrameworkElement" /> by its name by scanning the visual tree.</summary>
            <param name="root">The root node.</param>
            <param name="name">The element name to search.</param>
            <returns>The found element or <c>null</c> if no element could be found. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetPlaneProjection(Windows.UI.Xaml.UIElement,System.Boolean)">
            <summary>Returns an element's <see cref="T:Windows.UI.Xaml.Media.PlaneProjection"/>. </summary>
            <param name="element">The element. </param>
            <param name="createIfNecessary">Whether or not to create the projection if it doesn't already exist. </param>
            <returns>The plane project, or null if not found or created. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetTransform``1(Windows.UI.Xaml.UIElement,MyToolkit.UI.TransformCreationMode)">
            <summary>Returns a render transform of the specified type from the element, creating it if necessary. </summary>
            <typeparam name="TRequestedTransform">The type of transform (Rotate, Translate, etc)</typeparam>
            <param name="element">The element to check</param>
            <param name="mode">The mode to use for creating transforms, if not found</param>
            <returns>The specified transform, or null if not found and not created</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualParent(Windows.UI.Xaml.FrameworkElement)">
            <summary>Gets the visual parent of an element. </summary>
            <param name="node">The element whose parent is desired</param>
            <returns>The visual parent, or null if not found (usually means visual tree is not ready)</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualParentOfType``1(Windows.UI.Xaml.FrameworkElement)">
            <summary>Gets the visual parent of an element and a given type. </summary>
            <param name="element">The element whose parent is desired</param>
            <returns>The visual parent, or null if not found (usually means visual tree is not ready)</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChild(Windows.UI.Xaml.FrameworkElement,System.Int32)">
            <summary>Returns a visual child of an element</summary>
            <param name="node">The element whose child is desired</param>
            <param name="index">The index of the child</param>
            <returns>The found child, or null if not found (usually means visual tree is not ready)</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildren``1(Windows.UI.Xaml.DependencyObject)">
            <summary>Gets the visual children of type T.</summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildren``1(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>Gets the visual children of type T.</summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="strict">if set to <c>true</c> [strict].</param>
            <returns></returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildren(Windows.UI.Xaml.DependencyObject)">
            <summary>Get the visual tree children of an element.</summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">The value of 'element' cannot be null. </exception>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildrenAndSelfIterator(Windows.UI.Xaml.DependencyObject)">
            <summary>Get the visual tree children of an element and the element itself.</summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element and the element itself.</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildren(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>Gets the visual children.</summary>
            <param name="target">The target.</param>
            <param name="strict">Prevents the search from navigating the logical tree; eg. ContentControl.Content</param>
            <returns></returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildren(Windows.UI.Xaml.FrameworkElement)">
            <summary>Gets all the visual children of the element</summary>
            <param name="root">The element to get children of</param>
            <returns>An enumerator of the children</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendants(Windows.UI.Xaml.DependencyObject,System.Boolean,System.Collections.Generic.Stack{Windows.UI.Xaml.DependencyObject})">
            <summary>A helper method used to get visual descendants using a depth-first strategy.</summary>
            <param name="target">The target.</param>
            <param name="strict">Prevents the search from navigating the logical tree; eg. ContentControl.Content</param>
            <param name="stack">The stack.</param>
            <returns></returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendants(Windows.UI.Xaml.DependencyObject)">
            <summary>Get the visual tree descendants of an element.</summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element.</returns>
            <exception cref="T:System.ArgumentNullException">The value of 'element' cannot be null. </exception>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendantsOfType``1(Windows.UI.Xaml.DependencyObject)">
            <summary>Get the visual tree descendants of an element.</summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element.</returns>
            <exception cref="T:System.ArgumentNullException">The value of 'element' cannot be null. </exception>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetFirstVisualDescendantOfType``1(Windows.UI.Xaml.DependencyObject)">
            <summary>Get the first visual tree descendant of an element.</summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element.</returns>
            <exception cref="T:System.ArgumentNullException">The value of 'element' cannot be null. </exception>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendantsAndSelf(Windows.UI.Xaml.DependencyObject)">
            <summary>Get the visual tree descendants of an element and the element itself. </summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element and the element itself.</returns>
            <exception cref="T:System.ArgumentNullException">The value of 'element' cannot be null. </exception>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendantsAndSelfIterator(Windows.UI.Xaml.DependencyObject)">
            <summary>Get the visual tree descendants of an element and the element  itself.</summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element and the element itself.</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualAncestors(Windows.UI.Xaml.FrameworkElement)">
            <summary>Gets the ancestors of the element, up to the root. </summary>
            <param name="node">The element to start from. </param>
            <returns>An enumerator of the ancestors. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.PrependWith``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Prepends an item to the beginning of an enumeration</summary>
            <typeparam name="T">The type of item in the enumeration</typeparam>
            <param name="list">The existing enumeration</param>
            <param name="head">The item to return before the enumeration</param>
            <returns>An enumerator that returns the head, followed by the rest of the list</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualStateGroup(Windows.UI.Xaml.FrameworkElement,System.String)">
            <summary>Gets the VisualStateGroup with the given name, looking up the visual tree</summary>
            <param name="root">AssociatedObject to start from</param>
            <param name="groupName">Name of the group to look for</param>
            <returns>The group, if found, or null</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.TestVisibility(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Controls.Orientation,System.Boolean)">
            <summary>Tests if the given item is visible or not inside a given viewport</summary>
            <param name="item">The item to check for visibility</param>
            <param name="viewport">The viewport to check visibility within</param>
            <param name="orientation">The orientation to check visibility with respect to (vertical or horizontal)</param>
            <param name="wantVisible">Whether the test is for being visible or invisible</param>
            <returns>True if the item's visibility matches the wantVisible parameter</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisibleItems``1(System.Collections.Generic.IEnumerable{``0},Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Controls.Orientation)">
            <summary>Returns the items that are visible in a given container.</summary>
            <typeparam name="T">The type of items being tested</typeparam>
            <param name="items">The items being tested; typically the children of a StackPanel</param>
            <param name="viewport">The viewport to test visibility against; typically a ScrollViewer</param>
            <param name="orientation">Whether to check for vertical or horizontal visibility</param>
            <returns>The items that are (at least partially) visible</returns>
            <remarks>This function assumes that items are ordered top-to-bottom or left-to-right; if items are in random positions it won't work</remarks>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisibleItems``1(System.Collections.Generic.IEnumerable{``0},Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Controls.Orientation,System.Collections.Generic.List{``0}@,System.Collections.Generic.List{``0}@,System.Collections.Generic.List{``0}@)">
            <summary>Returns the items that are visible in a given container plus the invisible ones before and after.</summary>
            <typeparam name="T">The type of items being tested</typeparam>
            <param name="items">The items being tested; typically the children of a StackPanel</param>
            <param name="viewport">The viewport to test visibility against; typically a ScrollViewer</param>
            <param name="orientation">Wether to check for vertical or horizontal visibility</param>
            <param name="beforeItems">List to be populated with items that precede the visible items</param>
            <param name="visibleItems">List to be populated with the items that are visible</param>
            <param name="afterItems">List to be populated with the items that follow the visible items</param>
            <remarks>This function assumes that items are ordered top-to-bottom or left-to-right; if items are in random positions it won't work</remarks>
        </member>
        <member name="T:MyToolkit.UI.FrameworkElementExtensions.VisibleSearchMode">
            <summary>Simple enumeration used in the state machine of GetVisibleItems</summary>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendents(Windows.UI.Xaml.FrameworkElement)">
            <summary>Performs a breadth-first enumeration of all the descendents in the tree</summary>
            <param name="root">The root node</param>
            <returns>An enumerator of all the children</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendents``1(Windows.UI.Xaml.FrameworkElement,System.Boolean)">
            <summary>Returns all the descendents of a particular type</summary>
            <typeparam name="T">The type to look for</typeparam>
            <param name="root">The root element</param>
            <param name="allAtSameLevel">Whether to stop searching the tree after the first set of items are found</param>
            <returns>List of the element found</returns>
            <remarks>
            The allAtSameLevel flag is used to control enumeration through the tree. For many cases (eg, finding ListBoxItems in a
            ListBox) you want enumeration to stop as soon as you've found all the items in the ListBox (no need to search further
            in the tree). For other cases though (eg, finding all the Buttons on a page) you want to exhaustively search the entire tree
            </remarks>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.PrintDescendentsTree(Windows.UI.Xaml.FrameworkElement)">
            <summary>Print the entire visual element tree of an item to the debug console</summary>
            <param name="root">The item whose descendents should be printed</param>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetChildTree(Windows.UI.Xaml.FrameworkElement,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>Returns a list of descendents, formatted with indentation</summary>
            <param name="root">The item whose tree should be returned</param>
            <param name="prefix">The prefix for this level of hierarchy</param>
            <param name="addPrefix">The string to add for the next level</param>
            <param name="results">A list that will contain the items on return</param>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.PrintAncestorTree(Windows.UI.Xaml.FrameworkElement)">
            <summary>Prints the visual ancestor tree for an item to the debug console</summary>
            <param name="node">The item whost ancestors you want to print</param>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetAncestorVisualTree(Windows.UI.Xaml.FrameworkElement,System.Collections.Generic.List{System.String})">
            <summary>Returns a list of ancestors</summary>
            <param name="node">The node whose ancestors you want</param>
            <param name="children">A list that will contain the children</param>
        </member>
        <member name="F:MyToolkit.UI.FrameworkElementExtensions.workItems">
            <summary>List of work to do on the next render (at the end of the current tick)</summary>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.ScheduleOnNextRender(System.Action)">
            <summary>Schedules work to happen at the end of this tick, when the <see cref="E:Windows.UI.Xaml.Media.CompositionTarget.Rendering" /> event is raised</summary>
            <param name="action">The work to do</param>
            <remarks>Typically you can schedule work using Dispatcher.BeginInvoke, but sometimes that will result in a single-frame
            glitch of the visual tree. In that case, use this method.</remarks>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.None">
            <summary>Don't try and create a transform if it doesn't already exist</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.Create">
            <summary>Create a transform if none exists</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.AddToGroup">
            <summary>Create and add to an existing group</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.CombineIntoGroup">
            <summary>Create a group and combine with existing transform; may break existing animations</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.IgnoreIdentityMatrix">
            <summary>Treat identity matrix as if it wasn't there; may break existing animations</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.CreateOrAddAndIgnoreMatrix">
            <summary>Create a new transform or add to group</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.Default">
            <summary>Default behavior, equivalent to CreateOrAddAndIgnoreMatrix</summary>
        </member>
        <member name="P:MyToolkit.UI.PopupHelper.IsPopupVisible">
            <summary>
            Gets a value indicating whether a popup is currently visible. 
            </summary>
        </member>
        <member name="M:MyToolkit.UI.PopupHelper.GetParentPopup(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the parent popup of the given element or null if it is not contained in a popup. 
            </summary>
        </member>
        <member name="M:MyToolkit.UI.PopupHelper.IsInPopup(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Returns true if the element is contained in a popup. 
            </summary>
        </member>
        <member name="M:MyToolkit.UI.PopupHelper.ClosePopup(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Closes the parent popup of the given control. 
            </summary>
            <param name="childControl">The child control. </param>
        </member>
        <member name="M:MyToolkit.UI.PopupHelper.ShowHorizontalDialogAsync(Windows.UI.Xaml.FrameworkElement,System.Boolean)">
            <summary>
            Shows a horizontal popup given as <see cref="T:Windows.UI.Xaml.FrameworkElement"/> and provides a task to wait until it is closed. 
            </summary>
        </member>
        <member name="M:MyToolkit.UI.PopupHelper.ShowVerticalDialogAsync(Windows.UI.Xaml.FrameworkElement,System.Boolean)">
            <summary>
            Shows a vertical popup given as <see cref="T:Windows.UI.Xaml.FrameworkElement"/> and provides a task to wait until it is closed. 
            </summary>
        </member>
        <member name="M:MyToolkit.UI.PopupHelper.ShowHorizontalDialog(Windows.UI.Xaml.FrameworkElement,System.Boolean,System.Action{Windows.UI.Xaml.Controls.Primitives.Popup})">
            <summary>
            Shows a horizontal popup given as <see cref="T:Windows.UI.Xaml.FrameworkElement"/> and provides a task to wait until it is closed. 
            </summary>
        </member>
        <member name="M:MyToolkit.UI.PopupHelper.ShowVerticalDialog(Windows.UI.Xaml.FrameworkElement,System.Boolean,System.Action{Windows.UI.Xaml.Controls.Primitives.Popup})">
            <summary>
            Shows a vertical popup given as <see cref="T:Windows.UI.Xaml.FrameworkElement"/> and provides a task to wait until it is closed. 
            </summary>
        </member>
        <member name="M:MyToolkit.UI.PopupHelper.ShowSettings(Windows.UI.Xaml.FrameworkElement,System.Action{Windows.UI.Xaml.Controls.Primitives.Popup})">
            <summary>
            Shows a <see cref="T:Windows.UI.Xaml.FrameworkElement"/> as settings popup. 
            Obsolete: Use the <see cref="T:Windows.UI.Xaml.Controls.SettingsFlyout"/> control instead. 
            </summary>
        </member>
        <member name="M:MyToolkit.UI.PopupHelper.ShowPaneAsync(Windows.UI.Xaml.FrameworkElement,System.Boolean)">
            <summary>
            Shows a <see cref="T:Windows.UI.Xaml.FrameworkElement"/> as pane. 
            </summary>
        </member>
        <member name="M:MyToolkit.UI.PopupHelper.ShowPane(Windows.UI.Xaml.FrameworkElement,System.Boolean,System.Action{Windows.UI.Xaml.Controls.Primitives.Popup})">
            <summary>
            Shows a <see cref="T:Windows.UI.Xaml.FrameworkElement"/> as pane. 
            </summary>
        </member>
        <member name="T:MyToolkit.UI.TemplatedVisualTreeExtensions">
            <summary>
            A static class providing methods for working with the visual tree using generics.  
            </summary>
        </member>
        <member name="M:MyToolkit.UI.TemplatedVisualTreeExtensions.GetFirstLogicalChildByType``1(Windows.UI.Xaml.FrameworkElement,System.Boolean)">
            <summary>
            Retrieves the first logical child of a specified type using a 
            breadth-first search.  A visual element is assumed to be a logical 
            child of another visual element if they are in the same namescope.
            For performance reasons this method manually manages the queue 
            instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <param name="applyTemplates">Specifies whether to apply templates on the traversed framework elements</param>
            <returns>The first logical child of the framework element of the specified type.</returns>
        </member>
        <member name="M:MyToolkit.UI.TemplatedVisualTreeExtensions.GetLogicalChildrenByType``1(Windows.UI.Xaml.FrameworkElement,System.Boolean)">
            <summary>
            Retrieves all the logical children of a specified type using a 
            breadth-first search.  A visual element is assumed to be a logical 
            child of another visual element if they are in the same namescope.
            For performance reasons this method manually manages the queue 
            instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <param name="applyTemplates">Specifies whether to apply templates on the traversed framework elements</param>
            <returns>The logical children of the framework element of the specified type.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MyToolkit.UI.TextBinding" -->
        <member name="T:MyToolkit.UI.TiltEffect">
            <summary>Provides an attached property to enable the tilt effect (push down/up animation) for <see cref="T:Windows.UI.Xaml.UIElement"/>s. </summary>
        </member>
        <member name="M:MyToolkit.UI.TiltEffect.SetIsTiltEnabled(Windows.UI.Xaml.UIElement,System.Boolean)">
            <summary>Sets a value indicating whether to enable tilt effect for the <see cref="T:Windows.UI.Xaml.UIElement"/>. </summary>
            <param name="element">The element. </param>
            <param name="value">The value. </param>
        </member>
        <member name="M:MyToolkit.UI.TiltEffect.GetIsTiltEnabled(Windows.UI.Xaml.UIElement)">
            <summary>Gets a value indicating whether the tilt effect for the <see cref="T:Windows.UI.Xaml.UIElement"/> is enabled. </summary>
            <param name="element">The element. </param>
        </member>
        <member name="M:MyToolkit.Animations.Fading.FadeInAsync(Windows.UI.Xaml.UIElement,System.TimeSpan,System.Double)">
            <summary>
            Fades an element in. 
            </summary>
            <param name="obj">The element to animate. </param>
            <param name="duration">The animation duration. </param>
            <param name="endOpacity">The opacity at the end of the animation. </param>
            <returns>Returns a task. </returns>
        </member>
        <member name="M:MyToolkit.Animations.Fading.FadeOutAsync(Windows.UI.Xaml.UIElement,System.TimeSpan,System.Double)">
            <summary>
            Fades an element out. 
            </summary>
            <param name="obj">The element to animate. </param>
            <param name="duration">The animation duration. </param>
            <param name="endOpacity">The opacity at the end of the animation. </param>
            <returns>Returns a task. </returns>
        </member>
        <member name="M:MyToolkit.Animations.Fading.FadeIn(Windows.UI.Xaml.UIElement,System.TimeSpan,System.Double,System.Action)">
            <summary>
            Fades an element in. 
            </summary>
            <param name="obj">The element to animate. </param>
            <param name="duration">The animation duration. </param>
            <param name="endOpacity">The opacity at the end of the animation. </param>
            <returns>Returns a task. </returns>
        </member>
        <member name="M:MyToolkit.Animations.Fading.FadeOut(Windows.UI.Xaml.UIElement,System.TimeSpan,System.Double,System.Action)">
            <summary>
            Fades an element out. 
            </summary>
            <param name="obj">The element to animate. </param>
            <param name="duration">The animation duration. </param>
            <param name="endOpacity">The opacity at the end of the animation. </param>
            <returns>Returns a task. </returns>
        </member>
        <member name="T:MyToolkit.Collections.ObservableGroupCollection`1">
            <summary>Provides a collection of groups which is useful in Windows 8's GridView control. </summary>
            <typeparam name="TItem">The item type. </typeparam>
        </member>
        <member name="P:MyToolkit.Collections.ObservableGroupCollection`1.ItemsPath">
            <summary>Gets the items path (default: TopItems).</summary>
        </member>
        <member name="M:MyToolkit.Collections.ObservableGroupCollection`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Collections.ObservableGroupCollection`1"/> class.</summary>
        </member>
        <member name="M:MyToolkit.Collections.ObservableGroupCollection`1.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Collections.ObservableGroupCollection`1"/> class.</summary>
        </member>
        <member name="M:MyToolkit.Collections.ObservableGroupCollection`1.AddGroup(System.String,System.Int32)">
            <summary>Creates and adds a group to the collection. </summary>
            <param name="title">The title of the group. </param>
            <param name="topItemsCount">The top items count. </param>
            <returns>The created <see cref="T:MyToolkit.Collections.TopItemsGroup`1"/></returns>
        </member>
        <member name="M:MyToolkit.Collections.ObservableGroupCollection`1.AddGroup(System.String,System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>Creates and adds a group to the collection. </summary>
            <param name="title">The title of the group. </param>
            <param name="items">The items in the group. </param>
            <param name="topItemsCount">The top items count. </param>
            <returns>The created <see cref="T:MyToolkit.Collections.TopItemsGroup`1"/></returns>
        </member>
        <member name="P:MyToolkit.Collections.ObservableGroupCollection`1.View">
            <summary>The <see cref="T:Windows.UI.Xaml.Data.CollectionViewSource"/> to use in XAML. </summary>
        </member>
        <member name="T:MyToolkit.Converters.ChainedConverter">
            <summary>
            Used to compose multiple converters. 
            </summary>
        </member>
        <member name="T:MyToolkit.Converters.ColorConverter">
            <summary>
            Converts a HEX string, color or brush to a HEX string, color or brush. 
            </summary>
        </member>
        <member name="T:MyToolkit.Converters.DateTimeConverter">
            <summary>
            Converts a DateTime into its string representation. 
            </summary>
        </member>
        <member name="T:MyToolkit.Converters.EqualityConverter">
            <summary>
            Returns a bool whether the objects string representation equals to the converter parameter. 
            The parameter can have multiple values devided by comma. 
            It may begin with ! for not-equality, but it cannot have multiple values.  
            </summary>
        </member>
        <member name="P:MyToolkit.Environment.Device.DeviceId">
            <summary>
            Gets a unique ID which can be used to identify the current device. 
            </summary>
        </member>
        <member name="P:MyToolkit.Environment.Device.HasHardwareBackKey">
            <summary>Gets a value indicating whether the current device has a hardware back key. </summary>
        </member>
        <member name="T:MyToolkit.Events.SingleEvent">
            <summary>Provides methods to register self-deregistering event callbacks. </summary>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.WaitForEventAsync``2(``0,System.Action{``0,System.EventHandler{``1}},System.Action{``0,System.EventHandler{``1}})">
            <summary>Asynchronously wait for an occurrence of the given event. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <typeparam name="TEventArgs">The type of the event args. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.WaitForRoutedEventAsync``1(``0,System.Action{``0,Windows.UI.Xaml.RoutedEventHandler},System.Action{``0,Windows.UI.Xaml.RoutedEventHandler})">
            <summary>Asynchronously wait for an occurrence of the given event. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.WaitForEventAsync``1(``0,System.Action{``0,Windows.UI.Xaml.RoutedEventHandler},System.Action{``0,Windows.UI.Xaml.RoutedEventHandler})">
            <summary>Asynchronously wait for an occurrence of the given event. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.RegisterEvent``2(``0,System.Action{``0,System.EventHandler{``1}},System.Action{``0,System.EventHandler{``1}},System.Action{System.Object,``1})">
            <summary>Registers an event callback which is called once and then automatically deregistered. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <typeparam name="TEventArgs">The type of the event args. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <param name="handler">The event handler. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.RegisterRoutedEvent``1(``0,System.Action{``0,Windows.UI.Xaml.RoutedEventHandler},System.Action{``0,Windows.UI.Xaml.RoutedEventHandler},System.Action{System.Object,Windows.UI.Xaml.RoutedEventArgs})">
            <summary>Registers an event callback which is called once and then automatically deregistered. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <param name="handler">The event handler. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.RegisterEvent``1(``0,System.Action{``0,Windows.UI.Xaml.RoutedEventHandler},System.Action{``0,Windows.UI.Xaml.RoutedEventHandler},System.Action{System.Object,Windows.UI.Xaml.RoutedEventArgs})">
            <summary>Registers an event callback which is called once and then automatically deregistered. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <param name="handler">The event handler. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.RegisterEvent``1(``0,System.Action{``0,Windows.UI.Xaml.ExceptionRoutedEventHandler},System.Action{``0,Windows.UI.Xaml.ExceptionRoutedEventHandler},System.Action{System.Object,Windows.UI.Xaml.RoutedEventArgs})">
            <summary>Registers an event callback which is called once and then automatically deregistered. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <param name="handler">The event handler. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.WaitForEventAsync``1(``0,System.Action{``0,Windows.UI.Xaml.ExceptionRoutedEventHandler},System.Action{``0,Windows.UI.Xaml.ExceptionRoutedEventHandler})">
            <summary>Asynchronously wait for an occurrence of the given event. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Mathematics.Matrix.Identity(System.Int32)">
            <exception cref="T:System.ArgumentException">The matrixSize parameter must be bigger than 0. </exception>
        </member>
        <member name="M:MyToolkit.Mathematics.TrigonometryMath.Direction(Windows.Foundation.Point)">
            <summary>
            Returns the angle of the point relative to the origin (0,0). 
            Degree 0 is at the top and is increased clock-wise. 
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:MyToolkit.Media.ImageHelper">
            <summary>
            Provides an attached property to use authenticated URIs for images and defer image loading. 
            </summary>
        </member>
        <member name="P:MyToolkit.Media.ImageHelper.IsEnabled">
            <summary>
            Gets or sets a value indicating whether images can be currently downloaded (when false then changes get queued and downloaded when set to true).  
            </summary>
        </member>
        <member name="T:MyToolkit.Messaging.DefaultActions">
            <summary>Provides default actions for some message lcasses to use with the <see cref="T:MyToolkit.Messaging.Messenger"/>. </summary>
        </member>
        <member name="M:MyToolkit.Messaging.DefaultActions.GetGoBackMessageAction(MyToolkit.Paging.MtFrame)">
            <summary>Gets the default handling action of <see cref="T:MyToolkit.Messaging.GoBackMessage"/> objects. </summary>
            <param name="frame">The frame to call the navigation methods on. </param>
            <returns>The message action. </returns>
        </member>
        <member name="M:MyToolkit.Messaging.DefaultActions.GetNavigateMessageAction(MyToolkit.Messaging.IViewModelToViewMapper,MyToolkit.Paging.MtFrame)">
            <summary>Gets the default handling action of <see cref="T:MyToolkit.Messaging.NavigateMessage"/> objects. </summary>
            <param name="mapper">The mapper which maps view model types to view types. </param>
            <param name="frame">The frame. </param>
            <returns>The message action. </returns>
        </member>
        <member name="M:MyToolkit.Messaging.DefaultActions.GetNavigateMessageAction(MyToolkit.Messaging.IViewModelToViewMapper,Windows.UI.Xaml.Controls.Frame)">
            <summary>Gets the default handling action of <see cref="T:MyToolkit.Messaging.NavigateMessage"/> objects. </summary>
            <param name="mapper">The mapper which maps view model types to view types. </param>
            <param name="frame">The frame. </param>
            <returns>The message action. </returns>
        </member>
        <member name="M:MyToolkit.Messaging.DefaultActions.GetTextMessageAction">
            <summary>Gets the default handling action of <see cref="T:MyToolkit.Messaging.TextMessage"/> objects. </summary>
            <returns>The message action. </returns>
        </member>
        <member name="T:MyToolkit.Multimedia.YouTube">
            <summary>Provides methods to access YouTube streams and data. </summary>
        </member>
        <member name="F:MyToolkit.Multimedia.YouTube.DefaultMinQuality">
            <summary>Gets the default minimum quality. </summary>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetVideoUriAsync(System.String,MyToolkit.Multimedia.YouTubeQuality,MyToolkit.Multimedia.YouTubeQuality,System.Threading.CancellationToken)">
            <summary>Returns the best matching YouTube stream URI which has an audio and video channel and is not 3D. </summary>
            <returns>The best matching <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> of the video. </returns>
            <exception cref="T:MyToolkit.Multimedia.YouTubeUriNotFoundException">The <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> could not be found. </exception>
            <exception cref="T:System.Net.WebException">An error occurred while downloading the resource. </exception>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetVideoUriAsync(System.String,MyToolkit.Multimedia.YouTubeQuality)">
            <summary>Returns the best matching YouTube stream URI which has an audio and video channel and is not 3D. </summary>
            <returns>The best matching <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> of the video. </returns>
            <exception cref="T:MyToolkit.Multimedia.YouTubeUriNotFoundException">The <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> could not be found. </exception>
            <exception cref="T:System.Net.WebException">An error occurred while downloading the resource. </exception>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetVideoUriAsync(System.String,MyToolkit.Multimedia.YouTubeQuality,System.Threading.CancellationToken)">
            <summary>Returns the best matching YouTube stream URI which has an audio and video channel and is not 3D. </summary>
            <returns>The best matching <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> of the video. </returns>
            <exception cref="T:MyToolkit.Multimedia.YouTubeUriNotFoundException">The <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> could not be found. </exception>
            <exception cref="T:System.Net.WebException">An error occurred while downloading the resource. </exception>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetVideoUriAsync(System.String,MyToolkit.Multimedia.YouTubeQuality,MyToolkit.Multimedia.YouTubeQuality)">
            <summary>Returns the best matching YouTube stream URI which has an audio and video channel and is not 3D. </summary>
            <returns>The best matching <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> of the video. </returns>
            <exception cref="T:MyToolkit.Multimedia.YouTubeUriNotFoundException">The <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> could not be found. </exception>
            <exception cref="T:System.Net.WebException">An error occurred while downloading the resource. </exception>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetUrisAsync(System.String)">
            <summary>Returns all available URIs (audio-only and video) for the given YouTube ID. </summary>
            <returns>The <see cref="T:MyToolkit.Multimedia.YouTubeUri"/>s of the video. </returns>
            <exception cref="T:System.Net.WebException">An error occurred while downloading the resource. </exception>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetUrisAsync(System.String,System.Threading.CancellationToken)">
            <summary>Returns all available URIs (audio-only and video) for the given YouTube ID. </summary>
            <returns>The <see cref="T:MyToolkit.Multimedia.YouTubeUri"/>s of the video. </returns>
            <exception cref="T:System.Net.WebException">An error occurred while downloading the resource. </exception>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.HttpGetAsync(System.String)">
            <exception cref="T:System.Net.WebException">An error occurred while downloading the resource. </exception>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetVideoTitleAsync(System.String)">
            <summary>Returns the title of the YouTube video. </summary>
            <exception cref="T:System.Net.WebException">An error occurred while downloading the resource. </exception>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetVideoTitleAsync(System.String,System.Threading.CancellationToken)">
            <summary>Returns the title of the YouTube video. </summary>
            <exception cref="T:System.Net.WebException">An error occurred while downloading the resource. </exception>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetThumbnailUri(System.String,MyToolkit.Multimedia.YouTubeThumbnailSize)">
            <summary>Returns a thumbnail for the given YouTube ID. </summary>
            <exception cref="T:System.ArgumentException">The value of 'size' is not defined. </exception>
        </member>
        <member name="T:MyToolkit.Multimedia.YouTubeUriNotFoundException">
            <summary>Exception which occurs when no <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> could be found. </summary>
        </member>
        <member name="T:MyToolkit.Multimedia.YouTubeUri">
            <summary>An URI to a YouTube MP4 video or audio stream. </summary>
        </member>
        <member name="P:MyToolkit.Multimedia.YouTubeUri.Itag">
            <summary>Gets the Itag of the stream. </summary>
        </member>
        <member name="P:MyToolkit.Multimedia.YouTubeUri.Uri">
            <summary>Gets the <see cref="P:MyToolkit.Multimedia.YouTubeUri.Uri"/> of the stream. </summary>
        </member>
        <member name="P:MyToolkit.Multimedia.YouTubeUri.Type">
            <summary>Gets the stream type. </summary>
        </member>
        <member name="P:MyToolkit.Multimedia.YouTubeUri.HasAudio">
            <summary>Gets a value indicating whether the stream has audio. </summary>
        </member>
        <member name="P:MyToolkit.Multimedia.YouTubeUri.HasVideo">
            <summary>Gets a value indicating whether the stream has video. </summary>
        </member>
        <member name="P:MyToolkit.Multimedia.YouTubeUri.Is3DVideo">
            <summary>Gets a value indicating whether the stream has 3D video. </summary>
        </member>
        <member name="P:MyToolkit.Multimedia.YouTubeUri.VideoQuality">
            <summary>Gets stream's video quality. </summary>
        </member>
        <member name="P:MyToolkit.Multimedia.YouTubeUri.AudioQuality">
            <summary>Gets stream's audio quality. </summary>
        </member>
        <member name="T:MyToolkit.Multimedia.YouTubeQuality">
            <summary>Enumeration of stream qualities. </summary>
        </member>
        <member name="T:MyToolkit.Multimedia.YouTubeThumbnailSize">
            <summary>Enumeration of thumbnail sizes. </summary>
        </member>
        <member name="T:MyToolkit.Mvvm.IStateHandlingViewModel">
            <summary>Interface of a view model which can save and load its state. </summary>
        </member>
        <member name="M:MyToolkit.Mvvm.IStateHandlingViewModel.OnLoadState(MyToolkit.Paging.MtLoadStateEventArgs)">
            <summary>Used to load the saved state when the page has been reactivated. </summary>
            <param name="pageState">The saved page state. </param>
        </member>
        <member name="M:MyToolkit.Mvvm.IStateHandlingViewModel.OnSaveState(MyToolkit.Paging.MtSaveStateEventArgs)">
            <summary>Used to save the state when the page gets suspended. </summary>
            <param name="pageState">The dictionary to save the page state into. </param>
        </member>
        <member name="M:MyToolkit.Mvvm.ViewModelHelper.BindViewModelToStatusBarProgress(MyToolkit.Mvvm.ViewModelBase)">
            <summary>Binds the <see cref="P:MyToolkit.Mvvm.ViewModelBase.IsLoading"/> property of the view model to 
            the progress bar visibility of the status bar (Windows Phone only). </summary>
            <param name="viewModel">The view model. </param>
        </member>
        <member name="M:MyToolkit.Mvvm.ViewModelHelper.RegisterViewModel(MyToolkit.Mvvm.ViewModelBase,Windows.UI.Xaml.FrameworkElement,System.Boolean)">
            <summary>Initializes the view model and registers events so that the OnLoaded and OnUnloaded methods are called. 
            This method must be called in the constructor after the <see cref="!:InitializeComponent"/> method call. </summary>
            <param name="viewModel">The view model. </param>
            <param name="view">The view. </param>
            <param name="registerForStateHandling">Registers the view model also for state handling
            The view model has to implement <see cref="T:MyToolkit.Mvvm.IStateHandlingViewModel"/> and the view must be a <see cref="T:MyToolkit.Paging.MtPage"/>. </param>
        </member>
        <member name="M:MyToolkit.Mvvm.ViewModelHelper.RegisterViewModelForStateHandling(MyToolkit.Mvvm.IStateHandlingViewModel,MyToolkit.Paging.MtPage)">
            <summary>Registers the view model for state handling. </summary>
            <param name="viewModel">The view model. </param>
            <param name="page">The page. </param>
        </member>
        <member name="T:MyToolkit.Paging.Animations.IPageAnimation">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Paging.Animations.IPageAnimation"/> class. </summary>
        </member>
        <member name="P:MyToolkit.Paging.Animations.IPageAnimation.PageInsertionMode">
            <summary>Gets the insertion mode for the next page.</summary>
        </member>
        <member name="M:MyToolkit.Paging.Animations.IPageAnimation.AnimateForwardNavigatingFromAsync(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>Animates for navigating forward from a page. </summary>
            <param name="previousPage">The previous page. </param>
            <param name="nextPage">The next page. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Paging.Animations.IPageAnimation.AnimateForwardNavigatedToAsync(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>Animates for navigating forward to a page. </summary>
            <param name="previousPage">The previous page. </param>
            <param name="nextPage">The next page. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Paging.Animations.IPageAnimation.AnimateBackwardNavigatingFromAsync(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>Animates for navigating backward from a page. </summary>
            <param name="previousPage">The previous page. </param>
            <param name="nextPage">The next page. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Paging.Animations.IPageAnimation.AnimateBackwardNavigatedToAsync(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>Animates for navigating backward to a page. </summary>
            <param name="previousPage">The previous page. </param>
            <param name="nextPage">The next page. </param>
            <returns>The task. </returns>
        </member>
        <member name="T:MyToolkit.Paging.Animations.PageInsertionMode">
            <summary>Enumeration of the possible page insertion modes. </summary>
        </member>
        <member name="F:MyToolkit.Paging.Animations.PageInsertionMode.ConcurrentAbove">
            <summary>Inserts the next page over the previous page before starting the animations so that both pages are in the visual tree during the animations. </summary>
        </member>
        <member name="F:MyToolkit.Paging.Animations.PageInsertionMode.ConcurrentBelow">
            <summary>Inserts the next page below the previous page before starting the animations so that both pages are in the visual tree during the animations. </summary>
        </member>
        <member name="F:MyToolkit.Paging.Animations.PageInsertionMode.Sequential">
            <summary>Inserts the next page after the navigating from animation and removes the previous page.</summary>
            <remarks>This mode should not be used because the page animation may stutter between the actual page changes.</remarks>
        </member>
        <member name="T:MyToolkit.Paging.Animations.PushPageAnimation">
            <summary>A push page animation. </summary>
        </member>
        <member name="M:MyToolkit.Paging.Animations.PushPageAnimation.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Paging.Animations.PushPageAnimation"/> class. </summary>
        </member>
        <member name="P:MyToolkit.Paging.Animations.PushPageAnimation.Duration">
            <summary>Gets or sets the duration of the animation. </summary>
        </member>
        <member name="P:MyToolkit.Paging.Animations.PushPageAnimation.PageInsertionMode">
            <summary>Gets the insertion mode for the next page.</summary>
        </member>
        <member name="M:MyToolkit.Paging.Animations.PushPageAnimation.AnimateForwardNavigatingFromAsync(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>Animates for navigating forward from a page. </summary>
            <param name="previousPage">The previous page. </param>
            <param name="nextPage">The next page. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Paging.Animations.PushPageAnimation.AnimateForwardNavigatedToAsync(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>Animates for navigating forward to a page. </summary>
            <param name="previousPage">The previous page. </param>
            <param name="nextPage">The next page. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Paging.Animations.PushPageAnimation.AnimateBackwardNavigatingFromAsync(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>Animates for navigating backward from a page. </summary>
            <param name="previousPage">The previous page. </param>
            <param name="nextPage">The next page. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Paging.Animations.PushPageAnimation.AnimateBackwardNavigatedToAsync(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>Animates for navigating backward to a page. </summary>
            <param name="previousPage">The previous page. </param>
            <param name="nextPage">The next page. </param>
            <returns>The task. </returns>
        </member>
        <member name="T:MyToolkit.Paging.Animations.ScalePageTransition">
            <summary>Scales the page like pushing a button.</summary>
        </member>
        <member name="M:MyToolkit.Paging.Animations.ScalePageTransition.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Paging.Animations.TurnstilePageAnimation"/> class. </summary>
        </member>
        <member name="P:MyToolkit.Paging.Animations.ScalePageTransition.Duration">
            <summary>Gets or sets the duration of the animation (default: 150ms). </summary>
        </member>
        <member name="P:MyToolkit.Paging.Animations.ScalePageTransition.PageInsertionMode">
            <summary>Gets the insertion mode for the next page.</summary>
        </member>
        <member name="M:MyToolkit.Paging.Animations.ScalePageTransition.AnimateForwardNavigatingFromAsync(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>Animates for navigating forward from a page. </summary>
            <param name="previousPage">The previous page. </param>
            <param name="nextPage">The next page. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Paging.Animations.ScalePageTransition.AnimateForwardNavigatedToAsync(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>Animates for navigating forward to a page. </summary>
            <param name="previousPage">The previous page. </param>
            <param name="nextPage">The next page. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Paging.Animations.ScalePageTransition.AnimateBackwardNavigatingFromAsync(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>Animates for navigating backward from a page. </summary>
            <param name="previousPage">The previous page. </param>
            <param name="nextPage">The next page. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Paging.Animations.ScalePageTransition.AnimateBackwardNavigatedToAsync(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>Animates for navigating backward to a page. </summary>
            <param name="previousPage">The previous page. </param>
            <param name="nextPage">The next page. </param>
            <returns>The task. </returns>
        </member>
        <member name="T:MyToolkit.Paging.Animations.TurnstilePageAnimation">
            <summary>A turnstile animation. </summary>
        </member>
        <member name="M:MyToolkit.Paging.Animations.TurnstilePageAnimation.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Paging.Animations.TurnstilePageAnimation"/> class. </summary>
        </member>
        <member name="P:MyToolkit.Paging.Animations.TurnstilePageAnimation.Duration">
            <summary>Gets or sets the duration of the animation (default: 150ms). </summary>
        </member>
        <member name="P:MyToolkit.Paging.Animations.TurnstilePageAnimation.UseBitmapCacheMode">
            <summary>Gets or sets a value indicating whether to use bitmap cache mode for the page controls. </summary>
        </member>
        <member name="P:MyToolkit.Paging.Animations.TurnstilePageAnimation.PageInsertionMode">
            <summary>Gets the insertion mode for the next page.</summary>
        </member>
        <member name="M:MyToolkit.Paging.Animations.TurnstilePageAnimation.AnimateForwardNavigatingFromAsync(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>Animates for navigating forward from a page. </summary>
            <param name="previousPage">The previous page. </param>
            <param name="nextPage">The next page. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Paging.Animations.TurnstilePageAnimation.AnimateForwardNavigatedToAsync(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>Animates for navigating forward to a page. </summary>
            <param name="previousPage">The previous page. </param>
            <param name="nextPage">The next page. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Paging.Animations.TurnstilePageAnimation.AnimateBackwardNavigatingFromAsync(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>Animates for navigating backward from a page. </summary>
            <param name="previousPage">The previous page. </param>
            <param name="nextPage">The next page. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Paging.Animations.TurnstilePageAnimation.AnimateBackwardNavigatedToAsync(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>Animates for navigating backward to a page. </summary>
            <param name="previousPage">The previous page. </param>
            <param name="nextPage">The next page. </param>
            <returns>The task. </returns>
        </member>
        <member name="T:MyToolkit.Paging.Handlers.BackKeyPressedHandler">
            <summary>Registers for the hardware back key button on Windows Phone and calls the registered methods when the event occurs. </summary>
        </member>
        <member name="M:MyToolkit.Paging.Handlers.BackKeyPressedHandler.Add(MyToolkit.Paging.MtPage,System.Func{System.Object,System.Boolean})">
            <summary>Adds a back key handler for a given page. </summary>
            <param name="page">The page. </param>
            <param name="handler">The handler. </param>
        </member>
        <member name="M:MyToolkit.Paging.Handlers.BackKeyPressedHandler.Remove(MyToolkit.Paging.MtPage)">
            <summary>Removes a back key pressed handler for a given page. </summary>
            <param name="page">The page. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtApplication.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Paging.MtApplication"/> class. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtApplication.RootFrame">
            <summary>Gets the root frame.</summary>
        </member>
        <member name="P:MyToolkit.Paging.MtApplication.WindowContent">
            <summary>Gets the content of the window.</summary>
        </member>
        <member name="P:MyToolkit.Paging.MtApplication.StartPageType">
            <summary>Gets the type of the start page (first page when launching application). </summary>
        </member>
        <member name="M:MyToolkit.Paging.MtApplication.OnInitializedAsync(MyToolkit.Paging.MtFrame,Windows.ApplicationModel.Activation.ApplicationExecutionState)">
            <summary>Called when a new instance of the application has been created. </summary>
            <param name="frame">The frame. </param>
            <param name="args">The launch arguments.</param>
        </member>
        <member name="M:MyToolkit.Paging.MtApplication.CreateWindowContentElement">
            <summary>Creates the window content element. </summary>
            <returns>The element. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtApplication.GetFrame(Windows.UI.Xaml.UIElement)">
            <summary>Gets the root frame given the window content element. </summary>
            <returns>The root frame. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtApplication.OnLaunched(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)">
            <summary>
            Invoked when the application is launched normally by the end user.  Other entry points
            will be used when the application is launched to open a specific file, to display
            search results, and so forth.
            </summary>
            <param name="args">Details about the launch request and process.</param>
        </member>
        <member name="M:MyToolkit.Paging.MtApplication.InitializeFrameAsync(Windows.ApplicationModel.Activation.ApplicationExecutionState)">
            <summary>Creates the application's root frame and loads the first page if needed. 
            Also calls <see cref="M:MyToolkit.Paging.MtApplication.OnInitializedAsync(MyToolkit.Paging.MtFrame,Windows.ApplicationModel.Activation.ApplicationExecutionState)"/> when the application is instantiated the first time. </summary>
            <param name="executionState">The application execution state. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtApplication.RestoreStateAsync">
            <summary>Restores the saved page states using the <see cref="T:MyToolkit.Paging.MtSuspensionManager"/>. </summary>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtApplication.SaveStateAsync">
            <summary>Loads the saved page states using the <see cref="T:MyToolkit.Paging.MtSuspensionManager"/>. </summary>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtApplication.OnSuspending(System.Object,Windows.ApplicationModel.SuspendingEventArgs)">
            <summary>Invoked when application execution is being suspended.  Application state is saved
            without knowing whether the application will be terminated or resumed with the contents
            of memory still intact. </summary>
            <param name="sender">The source of the suspend request.</param>
            <param name="e">Details about the suspend request.</param>
        </member>
        <member name="T:MyToolkit.Paging.MtFrame">
            <summary>Navigation container for pages. </summary>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Paging.MtFrame"/> class. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.ShowNavigationOnAppInAndOut">
            <summary>Gets or sets a value indicating whether to show the animation when launching, leaving or switching to the app. Default: false. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.DisableForwardStack">
            <summary>Gets or sets a value indicating whether the forward stack is disabled 
            (default: disabled on Windows Phone, enabled on Windows). </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.DisableCache">
            <summary>Gets or sets a value indicating whether the cache is fully 
            deactivated (should be used only for testing). Default: false. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.InternalFrame">
            <summary>Gets the underlying WinRT frame object. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.Current">
            <summary>Gets the current <see cref="T:MyToolkit.Paging.MtFrame"/>. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.Content">
            <summary>Gets or sets the content of the <see cref="T:MyToolkit.Paging.MtFrame"/>. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.ContentTransitions">
            <summary>Gets or sets the content transitions of the <see cref="T:MyToolkit.Paging.MtFrame"/>. </summary>
        </member>
        <member name="E:MyToolkit.Paging.MtFrame.Navigated">
            <summary>Occurs when the frame navigated to another page. </summary>
        </member>
        <member name="E:MyToolkit.Paging.MtFrame.Navigating">
            <summary>Occurs when the frame navigates to another page. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.GoBackCommand">
            <summary>Gets a command to navigate to the previous page. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.IsFirstPage">
            <summary>Gets a value indicating whether the first/root page is visible. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.PreviousPage">
            <summary>Gets the page before the current page in the page stack or null if not available. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.CurrentPage">
            <summary>Gets the current page. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.NextPage">
            <summary>Gets the page after the current page in the page stack or null if not available. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.CanGoBack">
            <summary>Gets a value indicating whether it is possible to navigate back. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.CanGoForward">
            <summary>Gets a value indicating whether it is possible to navigate forward. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.Pages">
            <summary>Gets a list of the pages in the page stack. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.BackStackDepth">
            <summary>Gets the number of pages in the page back stack. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.PageAnimation">
            <summary>Gets the current page animation. 
            Only available when ContentTransitions is null.
            May be overridden by the current page's PageAnimation property. </summary>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.GoForwardAsync">
            <summary>Tries to navigate forward to the next page. </summary>
            <remarks>After the task has completed the <see cref="T:Windows.UI.Xaml.Controls.Frame"/>'s current page has changed. </remarks>
            <returns>Returns true if navigating forward, false if cancelled</returns>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.GetNearestPageOfTypeInBackStack(System.Type)">
            <summary>Gets the first page of the specified type in the page back stack or null if no page of the type is available. </summary>
            <param name="pageType">The page type. </param>
            <returns>The page or null if not found. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.GoBackToAsync(MyToolkit.Paging.MtPageDescription)">
            <summary>Navigates back to the given page. </summary>
            <param name="pageDescription">The page to navigate to. </param>
            <returns>True if the navigation could be performed. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.GoHomeAsync">
            <summary>Navigates back to the first page in the page stack. </summary>
            <returns>True if the navigation could be performed. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.GoBackToAsync(System.Int32)">
            <summary>Navigates back to the given index. </summary>
            <param name="newPageIndex">The page index. </param>
            <returns>True if the navigation could be performed. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.RemovePageFromStack(MyToolkit.Paging.MtPageDescription)">
            <summary>Removes a page from the page stack. </summary>
            <param name="pageDescription">The page to remove. </param>
            <returns><c>true</c> if the page has been found and was removed; otherwise, <c>false</c>. </returns>
            <exception cref="T:System.ArgumentException">The current page cannot be removed from the stack. </exception>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.RemovePageFromStackAt(System.Int32)">
            <summary>Removes a page from the page stack. </summary>
            <param name="pageIndex">The index of the page page to remove. </param>
            <returns><c>true</c> if the page has been found and was removed; otherwise, <c>false</c>. </returns>
            <exception cref="T:System.ArgumentException">The current page cannot be removed from the stack. </exception>
        </member>
        <member name="P:MyToolkit.Paging.MtFrame.IsNavigating">
            <summary>Gets a value indicating whether the frame is currently navigating to another page. </summary>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.GoBackAsync">
            <summary>Tries to navigate back to the previous page. </summary>
            <remarks>After the task has completed the <see cref="T:Windows.UI.Xaml.Controls.Frame"/>'s current page has changed. </remarks>
            <returns>Returns true if navigating back, false if cancelled or CanGoBack is false. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.Initialize(System.Type,System.Object)">
            <summary>Initializes the frame and navigates to the given first page. </summary>
            <param name="homePageType">The type of the home page. </param>
            <param name="parameter">The parameter for the page. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.NavigateAsync(System.Type)">
            <summary>Navigates forward to a new instance of the given page type. </summary>
            <param name="pageType">The page type. </param>
            <returns>Returns true if the navigation process has not been cancelled. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.Navigate(System.Type)">
            <summary>Navigates to the page of the given type. </summary>
            <param name="sourcePageType">The page type. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.NavigateAsync(System.Type,System.Object)">
            <summary>Navigates forward to a new instance of the given page type.</summary>
            <param name="pageType">The page type. </param>
            <param name="parameter">The page parameter. </param>
            <returns>Returns true if the navigation process has not been cancelled. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.NavigateToExistingOrNewPageAsync(System.Type,System.Object)">
            <summary>Navigates forward to the existing page of the given page type or creates a new page instace.</summary>
            <remarks>If the page exists it is referenced multiple times in the page stack: 
            The <see cref="T:MyToolkit.Paging.MtPageDescription"/> is contained multiple times in the page stack.</remarks>
            <param name="pageType">The page type. </param>
            <param name="pageParameter">The page parameter. </param>
            <returns>Returns true if the navigation process has not been cancelled. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.MoveToTopAndNavigateAsync(MyToolkit.Paging.MtPageDescription)">
            <summary>Navigates to the given page and removes the page from the previous position in the page stack.</summary>
            <param name="page">The page.</param>
            <returns>True if page is now on top of the stack, false when navigation from the current page failed.</returns>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.CopyToTopAndNavigateAsync(MyToolkit.Paging.MtPageDescription)">
            <summary>Navigates to the given page and copies the page.</summary>
            <param name="page">The page.</param>
            <returns>True if page is now on top of the stack, false when navigation from the current page failed.</returns>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.ClearBackStack">
            <summary>Clears all pages from the page back stack.</summary>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.SetNavigationState(System.String)">
            <summary>Used set the serialized the current page stack (used in the SuspensionManager). </summary>
            <param name="data">The data. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.GetNavigationState">
            <summary>Used to serialize the current page stack (used in the SuspensionManager). </summary>
            <returns>The data. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.OnPageCreated(System.Object,System.Object)">
            <summary>Called when a new page has been created. </summary>
            <param name="sender">The frame. </param>
            <param name="page">The created page. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.OnNavigated(System.Object,MyToolkit.Paging.MtNavigationEventArgs)">
            <summary>Called when navigated to another page. </summary>
            <param name="sender">The sender. </param>
            <param name="args">The args. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtFrame.GoForwardOrBackAsync(Windows.UI.Xaml.Navigation.NavigationMode)">
            <exception cref="T:System.InvalidOperationException">The frame cannot go forward or back</exception>
        </member>
        <member name="P:MyToolkit.Paging.MtLoadStateEventArgs.PageState">
            <summary>A dictionary of state preserved by this page during an earlier
            session.  This will be null the first time a page is visited. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtLoadStateEventArgs.NavigationParameter">
            <summary>The parameter value passed to <see cref="M:MyToolkit.Paging.MtFrame.Navigate(System.Type)"/> 
            when this page was initially requested. </summary>
        </member>
        <member name="M:MyToolkit.Paging.MtLoadStateEventArgs.GetWithXmlSerializer``1(System.String)">
            <summary>Gets an object which is deserialized with <see cref="T:MyToolkit.Serialization.XmlSerialization"/>. </summary>
            <typeparam name="T">The type of the object. </typeparam>
            <param name="key">The key. </param>
            <returns>The object. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtLoadStateEventArgs.GetWithXmlSerializer(System.String,System.Type)">
            <summary>Gets an object which is deserialized with <see cref="T:MyToolkit.Serialization.XmlSerialization"/>. </summary>
            <param name="key">The key. </param>
            <param name="type">The type of the object. </param>
            <returns>The object. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtLoadStateEventArgs.Get``1(System.String)">
            <summary>Gets an object which is deserialized with <see cref="T:MyToolkit.Serialization.DataContractSerialization"/>. </summary>
            <typeparam name="T">The type of the object. </typeparam>
            <param name="key">The key. </param>
            <returns>The object. </returns>
        </member>
        <member name="T:MyToolkit.Paging.MtNavigatingCancelEventArgs">
            <summary>
            Event arguments for the navigating from event. 
            </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtNavigatingCancelEventArgs.Cancel">
            <summary>
            Gets or sets a value indiciating whether the navigation should be cancelled. 
            </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtNavigatingCancelEventArgs.Content">
            <summary>
            Gets the page object which is involved in the navigation. 
            </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtNavigatingCancelEventArgs.NavigationMode">
            <summary>
            Gets the navigation mode. 
            </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtNavigatingCancelEventArgs.SourcePageType">
            <summary>
            Gets the type of the page. 
            </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtNavigatingCancelEventArgs.Parameter">
            <summary>Gets the navigation parameter.</summary>
        </member>
        <member name="T:MyToolkit.Paging.MtNavigationEventArgs">
            <summary>
            Event arguments for the navigated to and from event. 
            </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtNavigationEventArgs.Content">
            <summary>
            Gets the page object which is involved in the navigation. 
            </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtNavigationEventArgs.Parameter">
            <summary>Gets the navigation parameter.</summary>
        </member>
        <member name="P:MyToolkit.Paging.MtNavigationEventArgs.SourcePageType">
            <summary>
            Gets the type of the page. 
            </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtNavigationEventArgs.NavigationMode">
            <summary>
            Gets the navigation mode. 
            </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtNavigationEventArgs.Parameters">
            <summary>
            Gets the parameter object as object array or null if it is not an object array. 
            </summary>
        </member>
        <member name="M:MyToolkit.Paging.MtNavigationEventArgs.GetParameter``1(System.Int32)">
            <summary>Gets a typed parameter from index assuming the parameter object is an object[]. </summary>
            <typeparam name="T">The parameter type. </typeparam>
            <param name="index">The parameter index. </param>
            <returns>The parameter value. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtNavigationEventArgs.GetParameter``1">
            <summary>Gets a typed parameter. </summary>
            <typeparam name="T">The parameter type. </typeparam>
            <returns>The parameter value. </returns>
        </member>
        <member name="T:MyToolkit.Paging.MtPage">
            <summary>The customized page base class.</summary>
        </member>
        <member name="P:MyToolkit.Paging.MtPage.Current">
            <summary>
            Gets the current page. 
            </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtPage.PageAnimation">
            <summary>Gets the current page animation. 
            Only available when the <see cref="T:MyToolkit.Paging.MtFrame"/>'s ContentTransitions  is null. 
            Overrides the <see cref="T:MyToolkit.Paging.MtFrame"/>'s PageAnimation property. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtPage.Frame">
            <summary>
            Gets the <see cref="T:MyToolkit.Paging.MtFrame"/> instance which is hosting the page. 
            </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtPage.AnimationContext">
            <summary>Gets or sets the control which is used for page animations. 
            If set to null, the root control of the page is used. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtPage.ActualAnimationContext">
            <summary>Gets the current animation context based on the <see cref="P:MyToolkit.Paging.MtPage.AnimationContext"/> property. </summary>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.RegisterViewModel(MyToolkit.Mvvm.ViewModelBase,System.Boolean)">
            <summary>Initializes the view model and registers events so that the OnLoaded and OnUnloaded methods are called. 
            This method must be called in the constructor after the <see cref="!:InitializeComponent"/> method call. </summary>
            <param name="viewModel">The view model. </param>
            <param name="registerForStateHandling">Registers the view model also for state handling
            The view model has to implement <see cref="T:MyToolkit.Mvvm.IStateHandlingViewModel"/> and the view must be a <see cref="T:MyToolkit.Paging.MtPage"/>. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.RegisterViewModelForStateHandling(MyToolkit.Mvvm.IStateHandlingViewModel)">
            <summary>Registers the view model for state handling. </summary>
            <param name="viewModel">The view model. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.BindViewModelToStatusBarProgress(MyToolkit.Mvvm.ViewModelBase)">
            <summary>Binds the <see cref="P:MyToolkit.Mvvm.ViewModelBase.IsLoading"/> property of the view model to 
            the progress bar visibility of the status bar (Windows Phone only). </summary>
            <param name="viewModel">The view model. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.AddGoBackHandler(System.Action{System.ComponentModel.CancelEventArgs})">
            <summary>
            Adds a go back handler at the end of the handler queue. 
            For example called when back key has been pressed on Windows Phone or backspace key or alt-left has been pressed Windows. 
            </summary>
            <param name="handler">The handler. </param>
            <returns>Returns the created async go back handler which is used for deregistration (RemoveGoBackAsyncHandler). </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.AddGoBackAsyncHandler(System.Func{System.ComponentModel.CancelEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Adds an async go back handler at the end of the handler queue. 
            For example called when back key has been pressed on Windows Phone or backspace key or alt-left has been pressed Windows. 
            </summary>
            <param name="handler">The handler. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.RemoveGoBackAsyncHandler(System.Func{System.ComponentModel.CancelEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Removes an async go back handler. 
            </summary>
            <param name="handler">The handler. </param>
        </member>
        <member name="P:MyToolkit.Paging.MtPage.InternalPage">
            <summary>
            Gets the underlying WinRT page object. 
            </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtPage.NavigationCacheMode">
            <summary>
            Gets or sets the navigation cache mode (default: required). 
            </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtPage.TopAppBar">
            <summary>Gets or sets the top app bar.</summary>
        </member>
        <member name="P:MyToolkit.Paging.MtPage.BottomAppBar">
            <summary>Gets or sets the bottom app bar.</summary>
        </member>
        <member name="P:MyToolkit.Paging.MtPage.IsSuspendable">
            <summary>
            Gets or sets a value indicating whether the page can save and load its state (default: true). 
            If false, then the page and all following pages are removed from the page stack when the app gets suspended. 
            </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtPage.UsePointerButtonsToNavigate">
            <summary>Gets or sets a value indicating whether to use the special pointer buttons to navigate (default: true).</summary>
        </member>
        <member name="P:MyToolkit.Paging.MtPage.UseAltLeftOrRightToNavigate">
            <summary>Gets or sets a value indicating whether to use alt-left or alt-right to 
            navigate back or forward (default: true).</summary>
        </member>
        <member name="P:MyToolkit.Paging.MtPage.UseBackKeyToNavigate">
            <summary>Gets or sets a value indicating whether the back key is used to navigate back (default: true).</summary>
        </member>
        <member name="P:MyToolkit.Paging.MtPage.UseBackKeyToNavigateInWebView">
            <summary>Gets or sets a value indicating whether the back key is used to navigate back 
            even if the focus is in a web view (default: false).</summary>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.LoadState(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Used to load the saved state when the page has been reactivated. </summary>
            <param name="parameter">The initial page parameter. </param>
            <param name="pageState">The saved page state. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.SaveState(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Used to save the state when the page gets suspended. </summary>
            <param name="pageState">The dictionary to save the page state into. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.OnLoadState(MyToolkit.Paging.MtLoadStateEventArgs)">
            <summary>Used to load the saved state when the page has been reactivated. </summary>
            <param name="pageState">The saved page state. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.OnSaveState(MyToolkit.Paging.MtSaveStateEventArgs)">
            <summary>Used to save the state when the page gets suspended. </summary>
            <param name="pageState">The dictionary to save the page state into. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.OnKeyActivated(Windows.UI.Core.AcceleratorKeyEventArgs)">
            <summary>
            Called when an accelerator key has been activated (not supported on WP).
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.OnKeyUp(Windows.UI.Core.AcceleratorKeyEventArgs)">
            <summary>Called when a key up event has occured (not supported on WP). </summary>
            <param name="args">The event arguments. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.OnNavigatingFrom(MyToolkit.Paging.MtNavigatingCancelEventArgs)">
            <summary>Called when navigating from this page. </summary>
            <param name="args">The event arguments. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.OnNavigatingFromAsync(MyToolkit.Paging.MtNavigatingCancelEventArgs)">
            <summary>Called when navigating from this page. 
            The navigation does no happen until the returned task has completed. 
            Return null or empty task to run the method synchronously. </summary>
            <param name="args">The event arguments. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.OnNavigatedFrom(MyToolkit.Paging.MtNavigationEventArgs)">
            <summary>Called when navigated from this page. </summary>
            <param name="args">The event arguments. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.OnNavigatedTo(MyToolkit.Paging.MtNavigationEventArgs)">
            <summary>Called when navigated to this page. </summary>
            <param name="args">The event arguments. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.OnVisibilityChanged(Windows.UI.Core.VisibilityChangedEventArgs)">
            <summary>Called when the page visibility has changed (e.g. the app has been suspended and it is no longer visible to the user). </summary>
            <param name="args">The event arguments. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.GoHome(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Navigates to the first page in the page stack. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.GoBack(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Navigates to the previous page in the page stack. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MyToolkit.Paging.MtPage.GoForward(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Navigates forward to the next page in the page stack. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MyToolkit.Paging.MtPageDescription">
            <summary>Describes a page in the page stack. </summary>
        </member>
        <member name="M:MyToolkit.Paging.MtPageDescription.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Paging.MtPageDescription"/> class.</summary>
        </member>
        <member name="M:MyToolkit.Paging.MtPageDescription.#ctor(System.Type,System.Object)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Paging.MtPageDescription"/> class.</summary>
            <param name="pageType">Type of the page.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="P:MyToolkit.Paging.MtPageDescription.IsInstantiated">
            <summary>Gets a value indicating whether the page is instantiated. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtPageDescription.Type">
            <summary>Gets the page type. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtPageDescription.Parameter">
            <summary>Gets or sets the page parameter. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtPageDescription.Page">
            <summary>Gets the page object or null if the page is not instantiated. </summary>
        </member>
        <member name="M:MyToolkit.Paging.MtPageDescription.GetPage(MyToolkit.Paging.MtFrame)">
            <exception cref="T:System.InvalidOperationException">The base type is not an MtPage. Change the base type from Page to MtPage. </exception>
        </member>
        <member name="M:MyToolkit.Paging.MtPageDescription.ReleasePage">
            <summary>Releases the page so that the GC can collect it.</summary>
        </member>
        <member name="P:MyToolkit.Paging.MtSaveStateEventArgs.PageState">
            <summary>A dictionary of state preserved by this page during an earlier
            session.  This will be null the first time a page is visited. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtSaveStateEventArgs.HasPageState">
            <summary>Gets a value indicating whether there is page state available. </summary>
        </member>
        <member name="M:MyToolkit.Paging.MtSaveStateEventArgs.SetWithXmlSerializer``1(System.String,``0,System.Type[])">
            <summary>Adds an object which is serialized with <see cref="T:MyToolkit.Serialization.XmlSerialization"/>. </summary>
            <typeparam name="T">The type of the object. </typeparam>
            <param name="key">The key. </param>
            <param name="obj">The object. </param>
            <param name="extraTypes">The additional types. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtSaveStateEventArgs.Set``1(System.String,``0,System.Type[])">
            <summary>Adds an object which is serialized with <see cref="T:MyToolkit.Serialization.DataContractSerialization"/>. </summary>
            <typeparam name="T">The type of the object. </typeparam>
            <param name="key">The key. </param>
            <param name="obj">The object. </param>
            <param name="extraTypes">The additional types. </param>
        </member>
        <member name="T:MyToolkit.Paging.MtSuspensionManager">
            <summary>Stores and loads global session state for application life cycle management. </summary>
        </member>
        <member name="E:MyToolkit.Paging.MtSuspensionManager.SessionStateRestored">
            <summary>Occurs when the session state has been restored.</summary>
        </member>
        <member name="P:MyToolkit.Paging.MtSuspensionManager.SessionState">
            <summary>Gets the session state for the current session. 
            The objects must be serializable with the <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> 
            and the types provided in <see cref="P:MyToolkit.Paging.MtSuspensionManager.KnownTypes"/>. </summary>
        </member>
        <member name="P:MyToolkit.Paging.MtSuspensionManager.KnownTypes">
            <summary>Gets a list of known types for the <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> 
            to serialize the <see cref="P:MyToolkit.Paging.MtSuspensionManager.SessionState"/>. </summary>
        </member>
        <member name="M:MyToolkit.Paging.MtSuspensionManager.SaveAsync">
            <summary>Saves the current session state. </summary>
        </member>
        <member name="M:MyToolkit.Paging.MtSuspensionManager.RestoreAsync">
            <summary>Restores the previously stored session state. </summary>
        </member>
        <member name="M:MyToolkit.Paging.MtSuspensionManager.RegisterFrame(MyToolkit.Paging.MtFrame,System.String)">
            <summary>Registers a frame so that its navigation state can be saved and restored. </summary>
            <param name="frame">The frame. </param>
            <param name="sessionStateKey">The session state key. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtSuspensionManager.DeregisterFrame(MyToolkit.Paging.MtFrame)">
            <summary>Deregisters a frame. </summary>
            <param name="frame">The frame. </param>
        </member>
        <member name="M:MyToolkit.Paging.MtSuspensionManager.SessionStateForFrame(MyToolkit.Paging.MtFrame)">
            <summary>Gets the session state for a given frame. </summary>
            <param name="frame">The frame. </param>
            <returns>The session state. </returns>
        </member>
        <member name="M:MyToolkit.Extended.Paging.Handlers.PageStackManager.RemovePageFromStack(MyToolkit.Paging.MtPageDescription)">
            <exception cref="T:System.ArgumentException">The current page cannot be removed from the stack. </exception>
        </member>
        <member name="M:MyToolkit.Extended.Paging.Handlers.PageStackManager.RemovePageFromStackAt(System.Int32)">
            <exception cref="T:System.ArgumentException">The current page cannot be removed from the stack. </exception>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.CreateCachedSerializer``1(System.Boolean,System.Type[])">
            <summary>Creates or retrieves a serializer for the given type and extra types. </summary>
            <typeparam name="T">The type to create the serialzer for. </typeparam>
            <param name="preserveReferences">Specifies whether to preserve references. </param>
            <param name="extraTypes">The extra types. </param>
            <returns>The <see cref="T:System.Xml.Serialization.XmlSerializer"/>. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.CreateSerializer``1(System.Boolean,System.Type[])">
            <summary>Creates a serializer for the given type and extra types. </summary>
            <typeparam name="T">The type to create the serialzer for. </typeparam>
            <param name="preserveReferences">Specifies whether to preserve references. </param>
            <param name="extraTypes">The extra types. </param>
            <returns>The <see cref="T:System.Xml.Serialization.XmlSerializer"/>. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.CanSerialize(System.Type)">
            <summary>Checks whether the given type can be serialized with the <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>. </summary>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.CanSerialize``1">
            <summary>Checks whether the given generic type can be serialized with the <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>. </summary>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.Serialize``1(``0,System.Boolean,System.Type[],System.Boolean)">
            <summary>Serializes an object to a XML string. </summary>
            <typeparam name="T">The type of the object to serialize. </typeparam>
            <param name="obj">The object to serialize. </param>
            <param name="preserveReferences">Specifies whether to preserve references. </param>
            <param name="extraTypes">The additional types. </param>
            <param name="useSerializerCache">Specifies whether to cache the serializer (default: true). </param>
            <returns>The XML string. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.Deserialize``1(System.String,System.Type[],System.Boolean)">
            <summary>Deserializes an object from a XML string. </summary>
            <typeparam name="T">The type of the resulting object. </typeparam>
            <param name="xml">The XML string. </param>
            <param name="extraTypes">The addional types. </param>
            <param name="useSerializerCache">Specifies whether to cache the serializer (default: true). </param>
            <returns>The deserialized object. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.SerializeAsync``1(``0,System.Boolean,System.Type[],System.Boolean)">
            <summary>Asynchronously serializes an object to a XML string. </summary>
            <typeparam name="T">The type of the object to serialize. </typeparam>
            <param name="preserveReferences">Specifies whether to preserve references. </param>
            <param name="obj">The object to serialize. </param>
            <param name="extraTypes">The additional types. </param>
            <param name="useSerializerCache">Specifies whether to cache the serializer (default: true). </param>
            <returns>The XML string. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.DeserializeAsync``1(System.String,System.Type[],System.Boolean)">
            <summary>Asynchronously deserializes an object from a XML string. </summary>
            <typeparam name="T">The type of the resulting object. </typeparam>
            <param name="xml">The XML string. </param>
            <param name="extraTypes">The addional types. </param>
            <param name="useSerializerCache">Specifies whether to cache the serializer (default: true). </param>
            <returns>The deserialized object. </returns>
        </member>
        <member name="T:MyToolkit.Storage.StorageApplicationSettings">
            <summary>Provides methods to write and read complex setting objects from files.</summary>
        </member>
        <member name="M:MyToolkit.Storage.StorageApplicationSettings.SetSettingToFileAsync``1(System.String,``0,System.Boolean,System.Type[])">
            <summary>Serializes and writes a setting object in a file (uses the DataContractSerializer).</summary>
            <typeparam name="TValue">The type of the setting value.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="roaming">If set to <c>true</c> the setting is synchronized between devices.</param>
            <param name="extraTypes">The extra types.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:MyToolkit.Storage.StorageApplicationSettings.GetSettingFromFileAsync``1(System.String,``0,System.Boolean,System.Type[])">
            <summary>Reads and deserializes a setting object from a file (uses the DataContractSerializer).</summary>
            <typeparam name="TValue">The type of the setting value.</typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default setting value.</param>
            <param name="roaming">If set to <c>true</c> the setting is synchronized between devices.</param>
            <param name="extraTypes">The extra types.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:MyToolkit.Storage.StorageApplicationSettings.SetSettingToXmlFileAsync``1(System.String,``0,System.Boolean,System.Type[])">
            <summary>Serializes and writes a setting object in a file (uses the XmlSerializer).</summary>
            <typeparam name="TValue">The type of the setting value.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="roaming">If set to <c>true</c> the setting is synchronized between devices.</param>
            <param name="extraTypes">The extra types.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:MyToolkit.Storage.StorageApplicationSettings.GetSettingFromXmlFileAsync``1(System.String,``0,System.Boolean,System.Type[])">
            <summary>Reads and deserializes a setting object from a file (uses the XmlSerializer).</summary>
            <typeparam name="TValue">The type of the setting value.</typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default setting value.</param>
            <param name="roaming">If set to <c>true</c> the setting is synchronized between devices.</param>
            <param name="extraTypes">The extra types.</param>
            <returns>The task.</returns>
        </member>
        <member name="T:MyToolkit.Utilities.ColorUtilities">
            <summary>Provides methods to manipulate <see cref="T:Windows.UI.Color"/> objects. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.Mix(Windows.UI.Color,System.Double,Windows.UI.Color)">
            <summary>Blends the given foreground color with the background using the given alpha value. </summary>
            <param name="foreground">The foreground <see cref="T:Windows.UI.Color"/>. </param>
            <param name="alpha">The alpha value. </param>
            <param name="background">The background <see cref="T:Windows.UI.Color"/>. </param>
            <returns>The new <see cref="T:Windows.UI.Color"/>. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.RemoveAlpha(Windows.UI.Color,Windows.UI.Color)">
            <summary>Removes the transparency from the foreground color using the given background color. </summary>
            <param name="foreground">The foreground <see cref="T:Windows.UI.Color"/>. </param>
            <param name="background">The background <see cref="T:Windows.UI.Color"/>. </param>
            <returns>The color without transparency. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.ChangeAlpha(Windows.UI.Color,System.Byte)">
            <summary>Changes the alpha channel of the <see cref="T:Windows.UI.Color"/>. </summary>
            <param name="color">The <see cref="T:Windows.UI.Color"/>. </param>
            <param name="alpha">The new alpha value. </param>
            <returns>The new <see cref="T:Windows.UI.Color"/>. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.ChangeAlpha(Windows.UI.Color,System.String)">
            <summary>Changes the alpha channel of the <see cref="T:Windows.UI.Color"/>. </summary>
            <param name="color">The <see cref="T:Windows.UI.Color"/>. </param>
            <param name="alpha">The new alpha value. </param>
            <returns>The new <see cref="T:Windows.UI.Color"/>. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.ToHex(Windows.UI.Color,System.Boolean)">
            <summary>Converts a <see cref="T:Windows.UI.Color"/> to HEX string. </summary>
            <param name="color">The <see cref="T:Windows.UI.Color"/>. </param>
            <param name="includeAlpha">If false then #RRGGBB, true then #AARRGGBB. </param>
            <returns>The HEX string. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.FromHex(System.String)">
            <summary>Creates a <see cref="T:Windows.UI.Color"/> from a HEX value. </summary>
            <param name="colorCode">The HEX in the form #RRGGBB or #AARRGGBB. </param>
            <returns>The <see cref="T:Windows.UI.Color"/>. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.FromHex(System.UInt32)">
            <summary>Creates a <see cref="T:Windows.UI.Color"/> from a HEX value. </summary>
            <param name="argb">The HEX value. </param>
            <returns>The <see cref="T:Windows.UI.Color"/>. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.FromString(System.String)">
            <summary>Creates a <see cref="T:Windows.UI.Color"/> from a <see cref="T:Windows.UI.Colors"/> enum string. </summary>
            <param name="value">The color string. </param>
            <returns>The <see cref="T:Windows.UI.Color"/>. </returns>
        </member>
        <member name="T:MyToolkit.Utilities.DependencyObjectExtensions">
            <summary>Provides extension methods for <see cref="T:Windows.UI.Xaml.DependencyObject"/> objects. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.DependencyObjectExtensions.FindVisualChild``1(Windows.UI.Xaml.DependencyObject)">
            <summary>Traverses the visual tree and returns the first child of the desired type. </summary>
            <typeparam name="T">The child type to find. </typeparam>
            <param name="obj">The parent object. </param>
            <returns>The child object. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.DependencyObjectExtensions.FindVisualChildren``1(Windows.UI.Xaml.DependencyObject)">
            <summary>Traverses the visual tree and returns all children of the desired type. </summary>
            <typeparam name="T">The child type to find. </typeparam>
            <param name="obj">The parent object. </param>
            <returns>The children. </returns>
        </member>
        <member name="T:MyToolkit.Utilities.DependencyPropertyChangedEvent">
            <summary>Provides methods to register to dependency property handler events. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.DependencyPropertyChangedEvent.Register(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.DependencyProperty,System.Action{System.Object,System.Object})">
            <summary>Registers an event callback on a given dependency property. </summary>
            <param name="frameworkElement">The source framework element. </param>
            <param name="property">The property to register the callback for. </param>
            <param name="handler">The event handler. </param>
        </member>
        <member name="M:MyToolkit.Utilities.DependencyPropertyChangedEvent.Deregister(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.DependencyProperty,System.Action{System.Object,System.Object})">
            <summary>Deregisters an event callback from a given dependency property. </summary>
            <param name="frameworkElement">The source framework element. </param>
            <param name="property">The property to register the callback for. </param>
            <param name="handler">The event handler. </param>
        </member>
        <member name="T:MyToolkit.Utilities.ItemsControlExtensions">
            <summary>Provides extension methods for <see cref="T:Windows.UI.Xaml.Controls.ItemsControl"/> objects. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.ItemsControlExtensions.GetVisibleItems``1(Windows.UI.Xaml.Controls.ItemsControl)">
            <summary>Gets all items of the <see cref="T:Windows.UI.Xaml.Controls.ItemsControl"/> which are currently visible on the screen. </summary>
            <typeparam name="T">The type of the items. </typeparam>
            <param name="itemsControl">The <see cref="T:Windows.UI.Xaml.Controls.ItemsControl"/>. </param>
            <returns>The visible items. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ItemsControlExtensions.GetFirstVisibleItem``1(Windows.UI.Xaml.Controls.ItemsControl)">
            <summary>Gets the first item of the <see cref="T:Windows.UI.Xaml.Controls.ItemsControl"/> which are currently visible on the screen. </summary>
            <typeparam name="T">The type of the item. </typeparam>
            <param name="itemsControl">The <see cref="T:Windows.UI.Xaml.Controls.ItemsControl"/>. </param>
            <returns>The visible item. </returns>
        </member>
        <member name="T:MyToolkit.Utilities.PageUtilities">
            <summary>Provides utility methods for page handling. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.PageUtilities.RegisterBackKey(Windows.UI.Xaml.Controls.Page)">
            <summary>Call this method in Loaded event as the event will be automatically 
            deregistered when the FrameworkElement has been unloaded. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.PageUtilities.RegisterAcceleratorKeyActivated(Windows.UI.Xaml.FrameworkElement,Windows.Foundation.TypedEventHandler{Windows.UI.Core.CoreDispatcher,Windows.UI.Core.AcceleratorKeyEventArgs})">
            <summary>Call this method in Loaded event as the event will be automatically 
            deregistered when the FrameworkElement has been unloaded. </summary>
            <param name="page">The page. </param>
            <param name="handler">The event handler. </param>
        </member>
        <member name="M:MyToolkit.Utilities.PageUtilities.RegisterSearchPressed(Windows.UI.Xaml.FrameworkElement,System.Action)">
            <summary>Call this method in Loaded event as the event will be automatically 
            deregistered when the FrameworkElement has been unloaded. </summary>
        </member>
        <member name="T:MyToolkit.Utilities.PropertyPathHelper">
            <summary>Provides helper methods for handling property paths. </summary>
        </member>
        <member name="T:MyToolkit.Utilities.ThreadUtilities">
            <summary>Provides thread related utility methods. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.ThreadUtilities.Sleep(System.Int32)">
            <summary>Blocks the thread for multiple milliseconds. </summary>
            <param name="ms">The wait time in milliseconds. </param>
        </member>
        <member name="T:MyToolkit.Utilities.ToastNotificationUtilities">
            <summary>Provides helper methods to show toast notifications. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.ToastNotificationUtilities.ShowMessage(System.String)">
            <summary>Shows a toast message with the given message. </summary>
            <param name="message">The message to show. </param>
        </member>
        <member name="T:MyToolkit.Utilities.Xml">
            <summary>Provides utility methods for handling XML. </summary>
        </member>
        <member name="T:Ionic.Crc.CRC32">
            <summary>
              Computes a CRC-32. The CRC-32 algorithm is parameterized - you
              can set the polynomial and enable or disable bit
              reversal. This can be used for GZIP, BZip2, or ZIP.
            </summary>
            <remarks>
              This type is used internally by DotNetZip; it is generally not used
              directly by applications wishing to create, read, or manipulate zip
              archive files.
            </remarks>
        </member>
        <member name="P:Ionic.Crc.CRC32.TotalBytesRead">
            <summary>
              Indicates the total number of bytes applied to the CRC.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CRC32.Crc32Result">
            <summary>
            Indicates the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="M:Ionic.Crc.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Ionic.Crc.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the
            output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Ionic.Crc.CRC32.ComputeCrc32(System.Int32,System.Byte)">
            <summary>
              Get the CRC32 for the given (word,byte) combo.  This is a
              computation defined by PKzip for PKZIP 2.0 (weak) encryption.
            </summary>
            <param name="W">The word to start with.</param>
            <param name="B">The byte to combine it with.</param>
            <returns>The CRC-ized result.</returns>
        </member>
        <member name="M:Ionic.Crc.CRC32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the value for the running CRC32 using the given block of bytes.
            This is useful when using the CRC32() class in a Stream.
            </summary>
            <param name="block">block of bytes to slurp</param>
            <param name="offset">starting point in the block</param>
            <param name="count">how many bytes within the block to slurp</param>
        </member>
        <member name="M:Ionic.Crc.CRC32.UpdateCRC(System.Byte)">
            <summary>
              Process one byte in the CRC.
            </summary>
            <param name = "b">the byte to include into the CRC .  </param>
        </member>
        <member name="M:Ionic.Crc.CRC32.UpdateCRC(System.Byte,System.Int32)">
            <summary>
              Process a run of N identical bytes into the CRC.
            </summary>
            <remarks>
              <para>
                This method serves as an optimization for updating the CRC when a
                run of identical bytes is found. Rather than passing in a buffer of
                length n, containing all identical bytes b, this method accepts the
                byte value and the length of the (virtual) buffer - the length of
                the run.
              </para>
            </remarks>
            <param name = "b">the byte to include into the CRC.  </param>
            <param name = "n">the number of times that byte should be repeated. </param>
        </member>
        <member name="M:Ionic.Crc.CRC32.Combine(System.Int32,System.Int32)">
            <summary>
              Combines the given CRC32 value with the current running total.
            </summary>
            <remarks>
              This is useful when using a divide-and-conquer approach to
              calculating a CRC.  Multiple threads can each calculate a
              CRC32 on a segment of the data, and then combine the
              individual CRC32 values at the end.
            </remarks>
            <param name="crc">the crc value to be combined with this one</param>
            <param name="length">the length of data the CRC value was calculated on</param>
        </member>
        <member name="M:Ionic.Crc.CRC32.#ctor">
            <summary>
              Create an instance of the CRC32 class using the default settings: no
              bit reversal, and a polynomial of 0xEDB88320.
            </summary>
        </member>
        <member name="M:Ionic.Crc.CRC32.#ctor(System.Boolean)">
            <summary>
              Create an instance of the CRC32 class, specifying whether to reverse
              data bits or not.
            </summary>
            <param name='reverseBits'>
              specify true if the instance should reverse data bits.
            </param>
            <remarks>
              <para>
                In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                want a CRC32 with compatibility with BZip2, you should pass true
                here. In the CRC-32 used by GZIP and PKZIP, the bits are not
                reversed; Therefore if you want a CRC32 with compatibility with
                those, you should pass false.
              </para>
            </remarks>
        </member>
        <member name="M:Ionic.Crc.CRC32.#ctor(System.Int32,System.Boolean)">
             <summary>
               Create an instance of the CRC32 class, specifying the polynomial and
               whether to reverse data bits or not.
             </summary>
             <param name='polynomial'>
               The polynomial to use for the CRC, expressed in the reversed (LSB)
               format: the highest ordered bit in the polynomial value is the
               coefficient of the 0th power; the second-highest order bit is the
               coefficient of the 1 power, and so on. Expressed this way, the
               polynomial for the CRC-32C used in IEEE 802.3, is 0xEDB88320.
             </param>
             <param name='reverseBits'>
               specify true if the instance should reverse data bits.
             </param>
            
             <remarks>
               <para>
                 In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                 want a CRC32 with compatibility with BZip2, you should pass true
                 here for the <c>reverseBits</c> parameter. In the CRC-32 used by
                 GZIP and PKZIP, the bits are not reversed; Therefore if you want a
                 CRC32 with compatibility with those, you should pass false for the
                 <c>reverseBits</c> parameter.
               </para>
             </remarks>
        </member>
        <member name="M:Ionic.Crc.CRC32.Reset">
            <summary>
              Reset the CRC-32 class - clear the CRC "remainder register."
            </summary>
            <remarks>
              <para>
                Use this when employing a single instance of this class to compute
                multiple, distinct CRCs on multiple, distinct data blocks.
              </para>
            </remarks>
        </member>
        <member name="T:Ionic.Crc.CrcCalculatorStream">
             <summary>
             A Stream that calculates a CRC32 (a checksum) on all bytes read,
             or on all bytes written.
             </summary>
            
             <remarks>
             <para>
             This class can be used to verify the CRC of a ZipEntry when
             reading from a stream, or to calculate a CRC when writing to a
             stream.  The stream should be used to either read, or write, but
             not both.  If you intermix reads and writes, the results are not
             defined.
             </para>
            
             <para>
             This class is intended primarily for use internally by the
             DotNetZip library.
             </para>
             </remarks>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>
            The default constructor.
            </summary>
            <remarks>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().  The stream uses the default CRC32
                algorithm, which implies a polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
              The constructor allows the caller to specify how to handle the
              underlying stream at close.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close().
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean,Ionic.Crc.CRC32)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close(), and the CRC32 instance to use.
            </summary>
            <remarks>
              <para>
                The stream uses the specified CRC32 instance, which allows the
                application to specify how the CRC gets calculated.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
            <param name="crc32">the CRC32 instance to use to calculate the CRC32</param>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.TotalBytesSlurped">
             <summary>
               Gets the total number of bytes run through the CRC32 calculator.
             </summary>
            
             <remarks>
               This is either the total number of bytes read, or the total number of
               bytes written, depending on the direction of this stream.
             </remarks>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.Crc">
            <summary>
              Provides the current CRC for all blocks slurped in.
            </summary>
            <remarks>
              <para>
                The running total of the CRC is kept as data is written or read
                through the stream.  read this property after all reads or writes to
                get an accurate CRC for the entire stream.
              </para>
            </remarks>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.LeaveOpen">
            <summary>
              Indicates whether the underlying stream will be left open when the
              <c>CrcCalculatorStream</c> is Closed.
            </summary>
            <remarks>
              <para>
                Set this at any point before calling <see cref="!:Close()"/>.
              </para>
            </remarks>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream.
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.CanRead">
            <summary>
            Indicates whether the stream supports reading.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.CanSeek">
            <summary>
              Indicates whether the stream supports seeking.
            </summary>
            <remarks>
              <para>
                Always returns false.
              </para>
            </remarks>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.CanWrite">
            <summary>
            Indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.Length">
            <summary>
              Returns the length of the underlying stream.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.Position">
            <summary>
              The getter for this property returns the total bytes read.
              If you use the setter, it will throw
            <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeking is not supported on this stream. This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="offset">N/A</param>
            <param name="origin">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.SetLength(System.Int64)">
            <summary>
            This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="value">N/A</param>
        </member>
        <member name="T:Ionic.Zlib.GZipStream">
             <summary>
               A class for compressing and decompressing GZIP streams.
             </summary>
             <remarks>
            
             <para>
               The <c>GZipStream</c> is a <see
               href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a
               <see cref="T:System.IO.Stream"/>. It adds GZIP compression or decompression to any
               stream.
             </para>
            
             <para>
               Like the <c>System.IO.Compression.GZipStream</c> in the .NET Base Class Library, the
               <c>Ionic.Zlib.GZipStream</c> can compress while writing, or decompress while
               reading, but not vice versa.  The compression method used is GZIP, which is
               documented in <see href="http://www.ietf.org/rfc/rfc1952.txt">IETF RFC
               1952</see>, "GZIP file format specification version 4.3".</para>
            
             <para>
               A <c>GZipStream</c> can be used to decompress data (through <c>Read()</c>) or
               to compress data (through <c>Write()</c>), but not both.
             </para>
            
             <para>
               If you wish to use the <c>GZipStream</c> to compress data, you must wrap it
               around a write-able stream. As you call <c>Write()</c> on the <c>GZipStream</c>, the
               data will be compressed into the GZIP format.  If you want to decompress data,
               you must wrap the <c>GZipStream</c> around a readable stream that contains an
               IETF RFC 1952-compliant stream.  The data will be decompressed as you call
               <c>Read()</c> on the <c>GZipStream</c>.
             </para>
            
             <para>
               Though the GZIP format allows data from multiple files to be concatenated
               together, this stream handles only a single segment of GZIP format, typically
               representing a single file.
             </para>
            
             <para>
               This class is similar to <see cref="!:ZlibStream"/> and <see cref="!:DeflateStream"/>.
               <c>ZlibStream</c> handles RFC1950-compliant streams.  <see cref="!:DeflateStream"/>
               handles RFC1951-compliant streams. This class handles RFC1952-compliant streams.
             </para>
            
             </remarks>
            
             <seealso cref="!:DeflateStream" />
             <seealso cref="!:ZlibStream" />
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Comment">
             <summary>
               The comment on the GZIP stream.
             </summary>
            
             <remarks>
             <para>
               The GZIP format allows for each file to optionally have an associated
               comment stored with the file.  The comment is encoded with the ISO-8859-1
               code page.  To include a comment in a GZIP stream you create, set this
               property before calling <c>Write()</c> for the first time on the
               <c>GZipStream</c>.
             </para>
            
             <para>
               When using <c>GZipStream</c> to decompress, you can retrieve this property
               after the first call to <c>Read()</c>.  If no comment has been set in the
               GZIP bytestream, the Comment property will return <c>null</c>
               (<c>Nothing</c> in VB).
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.FileName">
             <summary>
               The FileName for the GZIP stream.
             </summary>
            
             <remarks>
            
             <para>
               The GZIP format optionally allows each file to have an associated
               filename.  When compressing data (through <c>Write()</c>), set this
               FileName before calling <c>Write()</c> the first time on the <c>GZipStream</c>.
               The actual filename is encoded into the GZIP bytestream with the
               ISO-8859-1 code page, according to RFC 1952. It is the application's
               responsibility to insure that the FileName can be encoded and decoded
               correctly with this code page.
             </para>
            
             <para>
               When decompressing (through <c>Read()</c>), you can retrieve this value
               any time after the first <c>Read()</c>.  In the case where there was no filename
               encoded into the GZIP bytestream, the property will return <c>null</c> (<c>Nothing</c>
               in VB).
             </para>
             </remarks>
        </member>
        <member name="F:Ionic.Zlib.GZipStream.LastModified">
             <summary>
               The last modified time for the GZIP stream.
             </summary>
            
             <remarks>
               GZIP allows the storage of a last modified time with each GZIP entry.
               When compressing data, you can set this before the first call to
               <c>Write()</c>.  When decompressing, you can retrieve this value any time
               after the first call to <c>Read()</c>.
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Crc32">
            <summary>
            The CRC on the GZIP stream.
            </summary>
            <remarks>
            This is used for internal error checking. You probably don't need to look at this property.
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>GZipStream</c> will use the
               default compression level.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with
               <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a GZipStream to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <example>
             This example shows how to use a GZipStream to uncompress a file.
             <code>
             private void GunZipFile(string filename)
             {
                 if (!filename.EndsWith(".gz))
                     throw new ArgumentException("filename");
                 var DecompressedFile = filename.Substring(0,filename.Length-3);
                 byte[] working = new byte[WORKING_BUFFER_SIZE];
                 int n= 1;
                 using (System.IO.Stream input = System.IO.File.OpenRead(filename))
                 {
                     using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                     {
                         using (var output = System.IO.File.Create(DecompressedFile))
                         {
                             while (n !=0)
                             {
                                 n= decompressor.Read(working, 0, working.Length);
                                 if (n > 0)
                                 {
                                     output.Write(working, 0, n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub GunZipFile(ByVal filename as String)
                 If Not (filename.EndsWith(".gz)) Then
                     Throw New ArgumentException("filename")
                 End If
                 Dim DecompressedFile as String = filename.Substring(0,filename.Length-3)
                 Dim working(WORKING_BUFFER_SIZE) as Byte
                 Dim n As Integer = 1
                 Using input As Stream = File.OpenRead(filename)
                     Using decompressor As Stream = new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, True)
                         Using output As Stream = File.Create(UncompressedFile)
                             Do
                                 n= decompressor.Read(working, 0, working.Length)
                                 If n > 0 Then
                                     output.Write(working, 0, n)
                                 End IF
                             Loop While (n  > 0)
                         End Using
                     End Using
                 End Using
             End Sub
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
             <remarks>
            
             <para>
               The <c>CompressionMode</c> (Compress or Decompress) also establishes the
               "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A
               <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a <c>GZipStream</c> to compress a file into a .gz file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".gz"))
                 {
                     using (Stream compressor = new GZipStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".gz")
                     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>GZipStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the stream should be left open after Deflation
               or Inflation.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to leave
               the stream open.
             </para>
            
             <para>
               The <see cref="T:Ionic.Zlib.CompressionMode"/> (Compress or Decompress) also
               establishes the "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A <c>GZipStream</c>
               with <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             <para>
               The <c>GZipStream</c> will use the default compression level. If you want
               to specify the compression level, see <see cref="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)"/>.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the "captive"
               stream in other places in this documentation.
             </param>
            
             <param name="mode">Indicates whether the GZipStream will compress or decompress.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the base stream to remain open after
               inflation/deflation.
             </param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and the
               specified <c>CompressionLevel</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to
               leave the stream open.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a <c>GZipStream</c> to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see
               cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read and decompress data from the source stream.
             </summary>
            
             <remarks>
               With a <c>GZipStream</c>, decompression is done through reading.
             </remarks>
            
             <example>
             <code>
             byte[] working = new byte[WORKING_BUFFER_SIZE];
             using (System.IO.Stream input = System.IO.File.OpenRead(_CompressedFile))
             {
                 using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                 {
                     using (var output = System.IO.File.Create(_DecompressedFile))
                     {
                         int n;
                         while ((n= decompressor.Read(working, 0, working.Length)) !=0)
                         {
                             output.Write(working, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
             <param name="buffer">The buffer into which the decompressed data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">irrelevant; it will always throw!</param>
            <param name="origin">irrelevant; it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.SetLength(System.Int64)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">irrelevant; this method will always throw!</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
             <para>
               If you wish to use the <c>GZipStream</c> to compress data while writing,
               you can create a <c>GZipStream</c> with <c>CompressionMode.Compress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that <c>GZipStream</c>,
               providing uncompressed data as input.  The data sent to the output stream
               will be the compressed form of the data written.
             </para>
            
             <para>
               A <c>GZipStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not
               both. Writing implies compression.  Reading implies decompression.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a single string.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing GZIP-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a byte array.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing data that has been compressed with GZip.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.Tree.DistanceCode(System.Int32)">
            <summary>
            Map from a distance to a distance code.
            </summary>
            <remarks> 
            No side effects. _dist_code[256] and _dist_code[257] are never used.
            </remarks>
        </member>
        <member name="T:Ionic.Zlib.FlushType">
            <summary>
            Describes how to flush the current deflate operation.
            </summary>
            <remarks>
            The different FlushType values are useful when using a Deflate in a streaming application.
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.FlushType.None">
            <summary>No flush at all.</summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Partial">
            <summary>Closes the current block, but doesn't flush it to
            the output. Used internally only in hypothetical
            scenarios.  This was supposed to be removed by Zlib, but it is
            still in use in some edge cases.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Sync">
            <summary>
            Use this during compression to specify that all pending output should be
            flushed to the output buffer and the output should be aligned on a byte
            boundary.  You might use this in a streaming communication scenario, so that
            the decompressor can get all input data available so far.  When using this
            with a ZlibCodec, <c>AvailableBytesIn</c> will be zero after the call if
            enough output space has been provided before the call.  Flushing will
            degrade compression and so it should be used only when necessary.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Full">
            <summary>
            Use this during compression to specify that all output should be flushed, as
            with <c>FlushType.Sync</c>, but also, the compression state should be reset
            so that decompression can restart from this point if previous compressed
            data has been damaged or if random access is desired.  Using
            <c>FlushType.Full</c> too often can significantly degrade the compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Finish">
            <summary>Signals the end of the compression/decompression stream.</summary>
        </member>
        <member name="T:Ionic.Zlib.CompressionLevel">
            <summary>
            The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.None">
            <summary>
            None means that the data will be simply stored, with no change at all.
            If you are producing ZIPs for use on Mac OSX, be aware that archives produced with CompressionLevel.None
            cannot be opened with the default zip reader. Use a different CompressionLevel.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level0">
            <summary>
            Same as None.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.BestSpeed">
            <summary>
            The fastest but least effective compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level1">
            <summary>
            A synonym for BestSpeed.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level2">
            <summary>
            A little slower, but better, than level 1.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level3">
            <summary>
            A little slower, but better, than level 2.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level4">
            <summary>
            A little slower, but better, than level 3.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level5">
            <summary>
            A little slower than level 4, but with better compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Default">
            <summary>
            The default compression level, with a good balance of speed and compression efficiency.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level6">
            <summary>
            A synonym for Default.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level7">
            <summary>
            Pretty good compression!
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level8">
            <summary>
             Better compression than Level7!
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.BestCompression">
            <summary>
            The "best" compression, where best means greatest reduction in size of the input data stream.
            This is also the slowest compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level9">
            <summary>
            A synonym for BestCompression.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.CompressionStrategy">
            <summary>
            Describes options for how the compression algorithm is executed.  Different strategies
            work better on different sorts of data.  The strategy parameter can affect the compression
            ratio and the speed of compression but not the correctness of the compresssion.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionStrategy.Default">
            <summary>
            The default strategy is probably the best for normal data.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionStrategy.Filtered">
            <summary>
            The <c>Filtered</c> strategy is intended to be used most effectively with data produced by a
            filter or predictor.  By this definition, filtered data consists mostly of small
            values with a somewhat random distribution.  In this case, the compression algorithm
            is tuned to compress them better.  The effect of <c>Filtered</c> is to force more Huffman
            coding and less string matching; it is a half-step between <c>Default</c> and <c>HuffmanOnly</c>.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionStrategy.HuffmanOnly">
            <summary>
            Using <c>HuffmanOnly</c> will force the compressor to do Huffman encoding only, with no
            string matching.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.CompressionMode">
            <summary>
            An enum to specify the direction of transcoding - whether to compress or decompress.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionMode.Compress">
            <summary>
            Used to specify that the stream should compress the data.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionMode.Decompress">
            <summary>
            Used to specify that the stream should decompress the data.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.ZlibException">
            <summary>
            A general purpose exception class for exceptions in the Zlib library.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibException.#ctor">
            <summary>
            The ZlibException class captures exception information generated
            by the Zlib library.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibException.#ctor(System.String)">
            <summary>
            This ctor collects a message attached to the exception.
            </summary>
            <param name="s">the message for the exception.</param>
        </member>
        <member name="M:Ionic.Zlib.SharedUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Ionic.Zlib.SharedUtils.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
             <summary>
               Reads a number of characters from the current source TextReader and writes
               the data to the target array at the specified index.
             </summary>
            
             <param name="sourceTextReader">The source TextReader to read from</param>
             <param name="target">Contains the array of characteres read from the source TextReader.</param>
             <param name="start">The starting index of the target array.</param>
             <param name="count">The maximum number of characters to read from the source TextReader.</param>
            
             <returns>
               The number of characters read. The number will be less than or equal to
               count depending on the data available in the source TextReader. Returns -1
               if the end of the stream is reached.
             </returns>
        </member>
        <member name="T:Ionic.Zlib.Adler">
             <summary>
             Computes an Adler-32 checksum.
             </summary>
             <remarks>
             The Adler checksum is similar to a CRC checksum, but faster to compute, though less
             reliable.  It is used in producing RFC1950 compressed streams.  The Adler checksum
             is a required part of the "ZLIB" standard.  Applications will almost never need to
             use this class directly.
             </remarks>
            
             <exclude/>
        </member>
        <member name="M:Ionic.Zlib.Adler.Adler32(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
              Calculates the Adler32 checksum.
            </summary>
            <remarks>
              <para>
                This is used within ZLIB.  You probably don't need to use this directly.
              </para>
            </remarks>
            <example>
               To compute an Adler32 checksum on a byte array:
             <code>
               var adler = Adler.Adler32(0, null, 0, 0);
               adler = Adler.Adler32(adler, buffer, index, length);
             </code>
            </example>
        </member>
        <member name="T:Ionic.Zlib.ZlibCodec">
             <summary>
             Encoder and Decoder for ZLIB and DEFLATE (IETF RFC1950 and RFC1951).
             </summary>
            
             <remarks>
             This class compresses and decompresses data according to the Deflate algorithm
             and optionally, the ZLIB format, as documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> and <see
             href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>.
             </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.InputBuffer">
            <summary>
            The buffer from which data is taken.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.NextIn">
            <summary>
            An index into the InputBuffer array, indicating where to start reading. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.AvailableBytesIn">
            <summary>
            The number of bytes available in the InputBuffer, starting at NextIn. 
            </summary>
            <remarks>
            Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.TotalBytesIn">
            <summary>
            Total number of bytes read so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.OutputBuffer">
            <summary>
            Buffer to store output data.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.NextOut">
            <summary>
            An index into the OutputBuffer array, indicating where to start writing. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.AvailableBytesOut">
            <summary>
            The number of bytes available in the OutputBuffer, starting at NextOut. 
            </summary>
            <remarks>
            Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.TotalBytesOut">
            <summary>
            Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.Message">
            <summary>
            used for diagnostics, when something goes wrong!
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.CompressLevel">
            <summary>
            The compression level to use in this codec.  Useful only in compression mode.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.WindowBits">
            <summary>
            The number of Window Bits to use.  
            </summary>
            <remarks>
            This gauges the size of the sliding window, and hence the 
            compression effectiveness as well as memory consumption. It's best to just leave this 
            setting alone if you don't know what it is.  The maximum value is 15 bits, which implies
            a 32k window.  
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.Strategy">
            <summary>
            The compression strategy to use.
            </summary>
            <remarks>
            This is only effective in compression.  The theory offered by ZLIB is that different
            strategies could potentially produce significant differences in compression behavior
            for different data sets.  Unfortunately I don't have any good recommendations for how
            to set it differently.  When I tested changing the strategy I got minimally different
            compression performance. It's best to leave this property alone if you don't have a
            good feel for it.  Or, you may want to produce a test harness that runs through the
            different strategy options and evaluates them on different file types. If you do that,
            let me know your results.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ZlibCodec.Adler32">
            <summary>
            The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.#ctor">
            <summary>
            Create a ZlibCodec.
            </summary>
            <remarks>
            If you use this default constructor, you will later have to explicitly call 
            InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
            or decompress. 
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.#ctor(Ionic.Zlib.CompressionMode)">
            <summary>
            Create a ZlibCodec that either compresses or decompresses.
            </summary>
            <param name="mode">
            Indicates whether the codec should compress (deflate) or decompress (inflate).
            </param>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate">
            <summary>
            Initialize the inflation state. 
            </summary>
            <remarks>
            It is not necessary to call this before using the ZlibCodec to inflate data; 
            It is implicitly called when you call the constructor.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate(System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to
             govern the handling of RFC1950 header bytes.
             </summary>
            
             <remarks>
             By default, the ZLIB header defined in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950</see> is expected.  If
             you want to read a zlib stream you should specify true for
             expectRfc1950Header.  If you have a deflate stream, you will want to specify
             false. It is only necessary to invoke this initializer explicitly if you
             want to specify false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte
             pair when reading the stream of data to be inflated.</param>
            
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate(System.Int32)">
            <summary>
            Initialize the ZlibCodec for inflation, with the specified number of window bits. 
            </summary>
            <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
            then you shouldn't be calling this initializer.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to govern the handling of
             RFC1950 header bytes. 
             </summary>
            
             <remarks>
             If you want to read a zlib stream you should specify true for
             expectRfc1950Header. In this case, the library will expect to find a ZLIB
             header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
             1950</see>, in the compressed stream.  If you will be reading a DEFLATE or
             GZIP stream, which does not have such a header, you will want to specify
             false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
             the stream of data to be inflated.</param>
             <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
             then you shouldn't be calling this initializer.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.Inflate(Ionic.Zlib.FlushType)">
             <summary>
             Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
             AvailableBytesOut  before calling this method.
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.None);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.Finish);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="flush">The flush to use when inflating.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.EndInflate">
            <summary>
            Ends an inflation session. 
            </summary>
            <remarks>
            Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
            After calling this you cannot call Inflate() without a intervening call to one of the
            InitializeInflate() overloads.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.SyncInflate">
            <summary>
            I don't know what this does!
            </summary>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate">
            <summary>
            Initialize the ZlibCodec for deflation operation.
            </summary>
            <remarks>
            The codec will use the MAX window bits and the default level of compression.
            </remarks>
            <example>
            <code>
             int bufferSize = 40000;
             byte[] CompressedBytes = new byte[bufferSize];
             byte[] DecompressedBytes = new byte[bufferSize];
             
             ZlibCodec compressor = new ZlibCodec();
             
             compressor.InitializeDeflate(CompressionLevel.Default);
             
             compressor.InputBuffer = System.Text.ASCIIEncoding.ASCII.GetBytes(TextToCompress);
             compressor.NextIn = 0;
             compressor.AvailableBytesIn = compressor.InputBuffer.Length;
             
             compressor.OutputBuffer = CompressedBytes;
             compressor.NextOut = 0;
             compressor.AvailableBytesOut = CompressedBytes.Length;
             
             while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize)
             {
               compressor.Deflate(FlushType.None);
             }
             
             while (true)
             {
               int rc= compressor.Deflate(FlushType.Finish);
               if (rc == ZlibConstants.Z_STREAM_END) break;
             }
             
             compressor.EndDeflate();
              
            </code>
            </example>
            <returns>Z_OK if all goes well. You generally don't need to check the return code.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified
            CompressionLevel.  It will emit a ZLIB stream as it compresses.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the explicit flag governing whether to emit an RFC1950 header byte pair.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified CompressionLevel.
            If you want to generate a zlib stream, you should specify true for
            wantRfc1950Header. In this case, the library will emit a ZLIB
            header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
            1950</see>, in the compressed stream.  
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel,System.Int32)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the specified number of window bits. 
            </summary>
            <remarks>
            The codec will use the specified number of window bits and the specified CompressionLevel.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel,System.Int32,System.Boolean)">
             <summary>
             Initialize the ZlibCodec for deflation operation, using the specified
             CompressionLevel, the specified number of window bits, and the explicit flag
             governing whether to emit an RFC1950 header byte pair.
             </summary>
            
             <param name="level">The compression level for the codec.</param>
             <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
             <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
             <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.Deflate(Ionic.Zlib.FlushType)">
            <summary>
            Deflate one batch of data.
            </summary>
            <remarks>
            You must have set InputBuffer and OutputBuffer before calling this method.
            </remarks>
            <example>
            <code>
            private void DeflateBuffer(CompressionLevel level)
            {
                int bufferSize = 1024;
                byte[] buffer = new byte[bufferSize];
                ZlibCodec compressor = new ZlibCodec();
            
                Console.WriteLine("\n============================================");
                Console.WriteLine("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
                MemoryStream ms = new MemoryStream();
            
                int rc = compressor.InitializeDeflate(level);
            
                compressor.InputBuffer = UncompressedBytes;
                compressor.NextIn = 0;
                compressor.AvailableBytesIn = UncompressedBytes.Length;
            
                compressor.OutputBuffer = buffer;
            
                // pass 1: deflate 
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.None);
            
                    if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                        throw new Exception("deflating: " + compressor.Message);
            
                    ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                // pass 2: finish and flush
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.Finish);
            
                    if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                        throw new Exception("deflating: " + compressor.Message);
            
                    if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
                        ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                compressor.EndDeflate();
            
                ms.Seek(0, SeekOrigin.Begin);
                CompressedBytes = new byte[compressor.TotalBytesOut];
                ms.Read(CompressedBytes, 0, CompressedBytes.Length);
            }
            </code>
            </example>
            <param name="flush">whether to flush all data as you deflate. Generally you will want to 
            use Z_NO_FLUSH here, in a series of calls to Deflate(), and then call EndDeflate() to 
            flush everything. 
            </param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.EndDeflate">
            <summary>
            End a deflation session.
            </summary>
            <remarks>
            Call this after making a series of one or more calls to Deflate(). All buffers are flushed.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.ResetDeflate">
            <summary>
            Reset a codec for another deflation session.
            </summary>
            <remarks>
            Call this to reset the deflation state.  For example if a thread is deflating
            non-consecutive blocks, you can call Reset() after the Deflate(Sync) of the first
            block and before the next Deflate(None) of the second block.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.SetDeflateParams(Ionic.Zlib.CompressionLevel,Ionic.Zlib.CompressionStrategy)">
            <summary>
            Set the CompressionStrategy and CompressionLevel for a deflation session.
            </summary>
            <param name="level">the level of compression to use.</param>
            <param name="strategy">the strategy to use for compression.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.SetDictionary(System.Byte[])">
            <summary>
            Set the dictionary to be used for either Inflation or Deflation.
            </summary>
            <param name="dictionary">The dictionary bytes to use.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="T:Ionic.Zlib.ZlibConstants">
            <summary>
            A bunch of constants used in the Zlib interface.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WindowBitsMax">
            <summary>
            The maximum number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WindowBitsDefault">
            <summary>
            The default number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_OK">
            <summary>
            indicates everything is A-OK
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_STREAM_END">
            <summary>
            Indicates that the last operation reached the end of the stream.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_NEED_DICT">
            <summary>
            The operation ended in need of a dictionary. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_STREAM_ERROR">
            <summary>
            There was an error with the stream - not enough data, not open and readable, etc.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_DATA_ERROR">
            <summary>
            There was an error with the data - not enough data, bad data, etc.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_BUF_ERROR">
            <summary>
            There was an error with the working buffer.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WorkingBufferSizeDefault">
            <summary>
            The size of the working buffer used in the ZlibCodec class. Defaults to 8192 bytes.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WorkingBufferSizeMin">
            <summary>
            The minimum size of the working buffer used in the ZlibCodec class.  Currently it is 128 bytes.
            </summary>
        </member>
    </members>
</doc>
