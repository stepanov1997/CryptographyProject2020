<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyToolkit.Extended</name>
    </assembly>
    <members>
        <member name="T:MyToolkit.Controls.MtListBox">
            <summary>A <see cref="T:System.Windows.Controls.ListBox"/> with additional features. </summary>
        </member>
        <member name="M:MyToolkit.Controls.MtListBox.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.MtListBox"/> class. </summary>
        </member>
        <member name="M:MyToolkit.Controls.MtListBox.GetListBoxItemFromItem(System.Object)">
            <summary>Gets the <see cref="T:System.Windows.Controls.ListBoxItem"/> for a given item. </summary>
            <param name="item">The item. </param>
            <returns>The <see cref="T:System.Windows.Controls.ListBoxItem"/>. </returns>
        </member>
        <member name="M:MyToolkit.Controls.MtListBox.ScrollToVerticalOffset(System.Double)">
            <summary>Scrolls to the given offset. </summary>
            <param name="offset">The offset. </param>
            <returns>Returns false if the <see cref="P:MyToolkit.Controls.MtListBox.ScrollViewer"/> was not loaded. </returns>
        </member>
        <member name="M:MyToolkit.Controls.MtListBox.StopScrolling">
            <summary>Stops the current scrolling. </summary>
            <returns>Returns false if the <see cref="P:MyToolkit.Controls.MtListBox.ScrollViewer"/> was not loaded. </returns>
        </member>
        <member name="M:MyToolkit.Controls.MtListBox.IsScrollingPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">The IsScrolling property is read-only. </exception>
        </member>
        <member name="P:MyToolkit.Controls.MtListBox.ScrollViewer">
            <summary>Gets the view's <see cref="P:MyToolkit.Controls.MtListBox.ScrollViewer"/>. </summary>
        </member>
        <member name="P:MyToolkit.Controls.MtListBox.TriggerScrolledToEndEvents">
            <summary>Gets or sets a value indicating whether scrolled to end events should be triggered. </summary>
        </member>
        <member name="E:MyToolkit.Controls.MtListBox.ScrolledToEnd">
            <summary>Occurs when the user scrolled to the end of the view. </summary>
        </member>
        <member name="P:MyToolkit.Controls.MtListBox.InnerMargin">
            <summary>Gets or sets the inner margin. </summary>
        </member>
        <member name="E:MyToolkit.Controls.MtListBox.PrepareContainerForItem">
            <summary>Occurs when a new container control gets created. </summary>
        </member>
        <member name="E:MyToolkit.Controls.MtListBox.ScrollingStateChanged">
            <summary>Occurs when the scrolling state changed. </summary>
        </member>
        <member name="P:MyToolkit.Controls.MtListBox.IsScrolling">
            <summary>Gets a value indicating whether the user is currently scrolling the view. </summary>
        </member>
        <member name="T:MyToolkit.Controls.ExtendedListBox">
            <summary>A <see cref="T:System.Windows.Controls.ListBox"/> with additional features. </summary>
        </member>
        <member name="T:MyToolkit.Controls.ScrollingStateChangedEventArgs">
            <summary>Contains information for the scrolling state changed event. </summary>
        </member>
        <member name="M:MyToolkit.Controls.ScrollingStateChangedEventArgs.#ctor(System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.ScrollingStateChangedEventArgs"/> class. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrollingStateChangedEventArgs.OldValue">
            <summary>Gets the old scrolling state. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrollingStateChangedEventArgs.NewValue">
            <summary>Gets the new scrolling state. </summary>
        </member>
        <member name="T:MyToolkit.Controls.ScrolledToEndEventArgs">
            <summary>Contains information for the scrolled to end event. </summary>
        </member>
        <member name="M:MyToolkit.Controls.ScrolledToEndEventArgs.#ctor(System.Windows.Controls.ScrollViewer)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Controls.ScrolledToEndEventArgs"/> class. </summary>
        </member>
        <member name="P:MyToolkit.Controls.ScrolledToEndEventArgs.ScrollViewer">
            <summary>Gets the involved scroll viewer. </summary>
        </member>
        <member name="T:MyToolkit.Controls.UniformGrid">
            <summary>Panel which arranges children in a grid with all equal cell sizes. </summary>
        </member>
        <member name="T:MyToolkit.Converters.DateTimeConverter">
            <summary>
            Converts a DateTime into its string representation. 
            </summary>
        </member>
        <member name="T:MyToolkit.Events.SingleEvent">
            <summary>Provides methods to register self-deregistering event callbacks. </summary>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.WaitForEventAsync``2(``0,System.Action{``0,System.EventHandler{``1}},System.Action{``0,System.EventHandler{``1}})">
            <summary>Asynchronously wait for an occurrence of the given event. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <typeparam name="TEventArgs">The type of the event args. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.WaitForRoutedEventAsync``1(``0,System.Action{``0,System.Windows.RoutedEventHandler},System.Action{``0,System.Windows.RoutedEventHandler})">
            <summary>Asynchronously wait for an occurrence of the given event. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.WaitForEventAsync``1(``0,System.Action{``0,System.Windows.RoutedEventHandler},System.Action{``0,System.Windows.RoutedEventHandler})">
            <summary>Asynchronously wait for an occurrence of the given event. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.RegisterEvent``2(``0,System.Action{``0,System.EventHandler{``1}},System.Action{``0,System.EventHandler{``1}},System.Action{System.Object,``1})">
            <summary>Registers an event callback which is called once and then automatically deregistered. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <typeparam name="TEventArgs">The type of the event args. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <param name="handler">The event handler. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.RegisterRoutedEvent``1(``0,System.Action{``0,System.Windows.RoutedEventHandler},System.Action{``0,System.Windows.RoutedEventHandler},System.Action{System.Object,System.Windows.RoutedEventArgs})">
            <summary>Registers an event callback which is called once and then automatically deregistered. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <param name="handler">The event handler. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.RegisterEvent``1(``0,System.Action{``0,System.Windows.RoutedEventHandler},System.Action{``0,System.Windows.RoutedEventHandler},System.Action{System.Object,System.Windows.RoutedEventArgs})">
            <summary>Registers an event callback which is called once and then automatically deregistered. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <param name="handler">The event handler. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.RegisterEvent``1(``0,System.Action{``0,System.Windows.ExceptionRoutedEventHandler},System.Action{``0,System.Windows.ExceptionRoutedEventHandler},System.Action{System.Object,System.Windows.RoutedEventArgs})">
            <summary>Registers an event callback which is called once and then automatically deregistered. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <param name="handler">The event handler. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.WaitForEventAsync``1(``0,System.Action{``0,System.Windows.ExceptionRoutedEventHandler},System.Action{``0,System.Windows.ExceptionRoutedEventHandler})">
            <summary>Asynchronously wait for an occurrence of the given event. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <returns>The task. </returns>
        </member>
        <member name="T:MyToolkit.Messaging.DefaultActions">
            <summary>Provides default actions for some message lcasses to use with the <see cref="T:MyToolkit.Messaging.Messenger"/>. </summary>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.Serialize``1(``0,System.Boolean,System.Type[])">
            <summary>Serializes an object to a XML string. </summary>
            <typeparam name="T">The type of the object to serialize. </typeparam>
            <param name="obj">The object to serialize. </param>
            <param name="preserveReferences">Specifies whether to preserve references. </param>
            <param name="extraTypes">The additional types. </param>
            <returns>The XML string. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.Deserialize``1(System.String,System.Type[])">
            <summary>Deserializes an object from a XML string. </summary>
            <typeparam name="T">The type of the resulting object. </typeparam>
            <param name="xml">The XML string. </param>
            <param name="extraTypes">The addional types. </param>
            <returns>The deserialized object. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.SerializeAsync``1(``0,System.Boolean,System.Type[],System.Boolean)">
            <summary>Asynchronously serializes an object to a XML string. </summary>
            <typeparam name="T">The type of the object to serialize. </typeparam>
            <param name="preserveReferences">Specifies whether to preserve references. </param>
            <param name="obj">The object to serialize. </param>
            <param name="extraTypes">The additional types. </param>
            <param name="useSerializerCache">Specifies whether to cache the serializer (default: true). </param>
            <returns>The XML string. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.DeserializeAsync``1(System.String,System.Type[],System.Boolean)">
            <summary>Asynchronously deserializes an object from a XML string. </summary>
            <typeparam name="T">The type of the resulting object. </typeparam>
            <param name="xml">The XML string. </param>
            <param name="extraTypes">The addional types. </param>
            <param name="useSerializerCache">Specifies whether to cache the serializer (default: true). </param>
            <returns>The deserialized object. </returns>
        </member>
        <member name="T:MyToolkit.UI.FrameworkElementExtensions">
            <summary>Provides extension methods for <see cref="T:System.Windows.FrameworkElement"/> objects. </summary>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVerticalScrollOffset(System.Windows.Controls.ListBox)">
            <summary>Gets the vertical offset for a ListBox</summary>
            <param name="list">The ListBox to check</param>
            <returns>The vertical offset</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetHorizontalScrollOffset(System.Windows.Controls.ListBox)">
            <summary>Gets the horizontal offset for a ListBox</summary>
            <param name="list">The ListBox to check</param>
            <returns>The horizontal offset</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVerticalScrollPosition(System.Windows.FrameworkElement)">
            <summary>Gets the vertical scroll position of the element's <see cref="T:System.Windows.Controls.ScrollViewer"/>. </summary>
            <param name="element">The element which must have a <see cref="T:System.Windows.Controls.ScrollViewer"/> as child. </param>
            <returns>The scroll position. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetHorizontalScrollPosition(System.Windows.FrameworkElement)">
            <summary>Sets the horizontal scroll position of the element's <see cref="T:System.Windows.Controls.ScrollViewer"/>. </summary>
            <param name="element">The element which must have a <see cref="T:System.Windows.Controls.ScrollViewer"/> as child. </param>
            <returns>The scroll position. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.SetVerticalScrollPosition(System.Windows.FrameworkElement,System.Double)">
            <summary>Sets the horizontal scroll position of the element's <see cref="T:System.Windows.Controls.ScrollViewer"/>. </summary>
            <param name="element">The element which must have a <see cref="T:System.Windows.Controls.ScrollViewer"/> as child. </param>
            <param name="position">The scroll position. </param>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.SetHorizontalScrollPosition(System.Windows.FrameworkElement,System.Double)">
            <summary>Gets the horizontal scroll position of the element's <see cref="T:System.Windows.Controls.ScrollViewer"/>. </summary>
            <param name="element">The element which must have a <see cref="T:System.Windows.Controls.ScrollViewer"/> as child. </param>
            <param name="position">The scroll position. </param>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.IsVisibleOnScreen(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>Checks whether an element which is contained in a container is currently visible on the screen. </summary>
            <param name="element">The element. </param>
            <param name="container">The element's container (e.g. a <see cref="T:System.Windows.Controls.ListBox"/>). </param>
            <returns>true if the element is visible to the user; false otherwise. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.FindParentDataContext(System.Windows.DependencyObject)">
            <summary>Finds the parent data context of the <see cref="T:System.Windows.DependencyObject"/> by checking the parents.</summary>
            <param name="dependencyObject">The <see cref="T:System.Windows.DependencyObject"/>.</param>
            <returns>The data context or <c>null</c> when no data context could be found. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetCanvasElementRect(System.Windows.FrameworkElement)">
            <summary>Gets the rectangle of the element in which is contained in a <see cref="T:System.Windows.Controls.Canvas"/>. </summary>
            <param name="element">The element.</param>
            <returns>The rectangle. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.FindVisualChild(System.Windows.FrameworkElement,System.String)">
            <summary>Finds a <see cref="T:System.Windows.FrameworkElement"/> by its name by scanning the visual tree.</summary>
            <param name="root">The root node.</param>
            <param name="name">The element name to search.</param>
            <returns>The found element or <c>null</c> if no element could be found. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetPlaneProjection(System.Windows.UIElement,System.Boolean)">
            <summary>Returns an element's <see cref="T:System.Windows.Media.PlaneProjection"/>. </summary>
            <param name="element">The element. </param>
            <param name="createIfNecessary">Whether or not to create the projection if it doesn't already exist. </param>
            <returns>The plane project, or null if not found or created. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetTransform``1(System.Windows.UIElement,MyToolkit.UI.TransformCreationMode)">
            <summary>Returns a render transform of the specified type from the element, creating it if necessary. </summary>
            <typeparam name="TRequestedTransform">The type of transform (Rotate, Translate, etc)</typeparam>
            <param name="element">The element to check</param>
            <param name="mode">The mode to use for creating transforms, if not found</param>
            <returns>The specified transform, or null if not found and not created</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualParent(System.Windows.FrameworkElement)">
            <summary>Gets the visual parent of an element. </summary>
            <param name="node">The element whose parent is desired</param>
            <returns>The visual parent, or null if not found (usually means visual tree is not ready)</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualParentOfType``1(System.Windows.FrameworkElement)">
            <summary>Gets the visual parent of an element and a given type. </summary>
            <param name="element">The element whose parent is desired</param>
            <returns>The visual parent, or null if not found (usually means visual tree is not ready)</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChild(System.Windows.FrameworkElement,System.Int32)">
            <summary>Returns a visual child of an element</summary>
            <param name="node">The element whose child is desired</param>
            <param name="index">The index of the child</param>
            <returns>The found child, or null if not found (usually means visual tree is not ready)</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildren``1(System.Windows.DependencyObject)">
            <summary>Gets the visual children of type T.</summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildren``1(System.Windows.DependencyObject,System.Boolean)">
            <summary>Gets the visual children of type T.</summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="strict">if set to <c>true</c> [strict].</param>
            <returns></returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>Get the visual tree children of an element.</summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">The value of 'element' cannot be null. </exception>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildrenAndSelfIterator(System.Windows.DependencyObject)">
            <summary>Get the visual tree children of an element and the element itself.</summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element and the element itself.</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildren(System.Windows.DependencyObject,System.Boolean)">
            <summary>Gets the visual children.</summary>
            <param name="target">The target.</param>
            <param name="strict">Prevents the search from navigating the logical tree; eg. ContentControl.Content</param>
            <returns></returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildren(System.Windows.FrameworkElement)">
            <summary>Gets all the visual children of the element</summary>
            <param name="root">The element to get children of</param>
            <returns>An enumerator of the children</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendants(System.Windows.DependencyObject,System.Boolean,System.Collections.Generic.Stack{System.Windows.DependencyObject})">
            <summary>A helper method used to get visual descendants using a depth-first strategy.</summary>
            <param name="target">The target.</param>
            <param name="strict">Prevents the search from navigating the logical tree; eg. ContentControl.Content</param>
            <param name="stack">The stack.</param>
            <returns></returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendants(System.Windows.DependencyObject)">
            <summary>Get the visual tree descendants of an element.</summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element.</returns>
            <exception cref="T:System.ArgumentNullException">The value of 'element' cannot be null. </exception>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendantsOfType``1(System.Windows.DependencyObject)">
            <summary>Get the visual tree descendants of an element.</summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element.</returns>
            <exception cref="T:System.ArgumentNullException">The value of 'element' cannot be null. </exception>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetFirstVisualDescendantOfType``1(System.Windows.DependencyObject)">
            <summary>Get the first visual tree descendant of an element.</summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element.</returns>
            <exception cref="T:System.ArgumentNullException">The value of 'element' cannot be null. </exception>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendantsAndSelf(System.Windows.DependencyObject)">
            <summary>Get the visual tree descendants of an element and the element itself. </summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element and the element itself.</returns>
            <exception cref="T:System.ArgumentNullException">The value of 'element' cannot be null. </exception>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendantsAndSelfIterator(System.Windows.DependencyObject)">
            <summary>Get the visual tree descendants of an element and the element  itself.</summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element and the element itself.</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualAncestors(System.Windows.FrameworkElement)">
            <summary>Gets the ancestors of the element, up to the root. </summary>
            <param name="node">The element to start from. </param>
            <returns>An enumerator of the ancestors. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.PrependWith``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Prepends an item to the beginning of an enumeration</summary>
            <typeparam name="T">The type of item in the enumeration</typeparam>
            <param name="list">The existing enumeration</param>
            <param name="head">The item to return before the enumeration</param>
            <returns>An enumerator that returns the head, followed by the rest of the list</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualStateGroup(System.Windows.FrameworkElement,System.String)">
            <summary>Gets the VisualStateGroup with the given name, looking up the visual tree</summary>
            <param name="root">AssociatedObject to start from</param>
            <param name="groupName">Name of the group to look for</param>
            <returns>The group, if found, or null</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.TestVisibility(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Windows.Controls.Orientation,System.Boolean)">
            <summary>Tests if the given item is visible or not inside a given viewport</summary>
            <param name="item">The item to check for visibility</param>
            <param name="viewport">The viewport to check visibility within</param>
            <param name="orientation">The orientation to check visibility with respect to (vertical or horizontal)</param>
            <param name="wantVisible">Whether the test is for being visible or invisible</param>
            <returns>True if the item's visibility matches the wantVisible parameter</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisibleItems``1(System.Collections.Generic.IEnumerable{``0},System.Windows.FrameworkElement,System.Windows.Controls.Orientation)">
            <summary>Returns the items that are visible in a given container.</summary>
            <typeparam name="T">The type of items being tested</typeparam>
            <param name="items">The items being tested; typically the children of a StackPanel</param>
            <param name="viewport">The viewport to test visibility against; typically a ScrollViewer</param>
            <param name="orientation">Whether to check for vertical or horizontal visibility</param>
            <returns>The items that are (at least partially) visible</returns>
            <remarks>This function assumes that items are ordered top-to-bottom or left-to-right; if items are in random positions it won't work</remarks>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisibleItems``1(System.Collections.Generic.IEnumerable{``0},System.Windows.FrameworkElement,System.Windows.Controls.Orientation,System.Collections.Generic.List{``0}@,System.Collections.Generic.List{``0}@,System.Collections.Generic.List{``0}@)">
            <summary>Returns the items that are visible in a given container plus the invisible ones before and after.</summary>
            <typeparam name="T">The type of items being tested</typeparam>
            <param name="items">The items being tested; typically the children of a StackPanel</param>
            <param name="viewport">The viewport to test visibility against; typically a ScrollViewer</param>
            <param name="orientation">Wether to check for vertical or horizontal visibility</param>
            <param name="beforeItems">List to be populated with items that precede the visible items</param>
            <param name="visibleItems">List to be populated with the items that are visible</param>
            <param name="afterItems">List to be populated with the items that follow the visible items</param>
            <remarks>This function assumes that items are ordered top-to-bottom or left-to-right; if items are in random positions it won't work</remarks>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendents(System.Windows.FrameworkElement)">
            <summary>Performs a breadth-first enumeration of all the descendents in the tree</summary>
            <param name="root">The root node</param>
            <returns>An enumerator of all the children</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendents``1(System.Windows.FrameworkElement,System.Boolean)">
            <summary>Returns all the descendents of a particular type</summary>
            <typeparam name="T">The type to look for</typeparam>
            <param name="root">The root element</param>
            <param name="allAtSameLevel">Whether to stop searching the tree after the first set of items are found</param>
            <returns>List of the element found</returns>
            <remarks>
            The allAtSameLevel flag is used to control enumeration through the tree. For many cases (eg, finding ListBoxItems in a
            ListBox) you want enumeration to stop as soon as you've found all the items in the ListBox (no need to search further
            in the tree). For other cases though (eg, finding all the Buttons on a page) you want to exhaustively search the entire tree
            </remarks>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.PrintDescendentsTree(System.Windows.FrameworkElement)">
            <summary>Print the entire visual element tree of an item to the debug console</summary>
            <param name="root">The item whose descendents should be printed</param>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetChildTree(System.Windows.FrameworkElement,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>Returns a list of descendents, formatted with indentation</summary>
            <param name="root">The item whose tree should be returned</param>
            <param name="prefix">The prefix for this level of hierarchy</param>
            <param name="addPrefix">The string to add for the next level</param>
            <param name="results">A list that will contain the items on return</param>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.PrintAncestorTree(System.Windows.FrameworkElement)">
            <summary>Prints the visual ancestor tree for an item to the debug console</summary>
            <param name="node">The item whost ancestors you want to print</param>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetAncestorVisualTree(System.Windows.FrameworkElement,System.Collections.Generic.List{System.String})">
            <summary>Returns a list of ancestors</summary>
            <param name="node">The node whose ancestors you want</param>
            <param name="children">A list that will contain the children</param>
        </member>
        <member name="F:MyToolkit.UI.FrameworkElementExtensions.workItems">
            <summary>List of work to do on the next render (at the end of the current tick)</summary>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.ScheduleOnNextRender(System.Action)">
            <summary>Schedules work to happen at the end of this tick, when the <see cref="E:System.Windows.Media.CompositionTarget.Rendering"/> event is raised</summary>
            <param name="action">The work to do</param>
            <remarks>Typically you can schedule work using Dispatcher.BeginInvoke, but sometimes that will result in a single-frame
            glitch of the visual tree. In that case, use this method.</remarks>
        </member>
        <member name="T:MyToolkit.UI.FrameworkElementExtensions.VisibleSearchMode">
            <summary>Simple enumeration used in the state machine of GetVisibleItems</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.None">
            <summary>Don't try and create a transform if it doesn't already exist</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.Create">
            <summary>Create a transform if none exists</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.AddToGroup">
            <summary>Create and add to an existing group</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.CombineIntoGroup">
            <summary>Create a group and combine with existing transform; may break existing animations</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.IgnoreIdentityMatrix">
            <summary>Treat identity matrix as if it wasn't there; may break existing animations</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.CreateOrAddAndIgnoreMatrix">
            <summary>Create a new transform or add to group</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.Default">
            <summary>Default behavior, equivalent to CreateOrAddAndIgnoreMatrix</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MyToolkit.UI.TextBinding" -->
        <member name="T:MyToolkit.Utilities.ColorUtilities">
            <summary>Provides methods to manipulate <see cref="T:System.Windows.Media.Color"/> objects. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.Mix(System.Windows.Media.Color,System.Double,System.Windows.Media.Color)">
            <summary>Blends the given foreground color with the background using the given alpha value. </summary>
            <param name="foreground">The foreground <see cref="T:System.Windows.Media.Color"/>. </param>
            <param name="alpha">The alpha value. </param>
            <param name="background">The background <see cref="T:System.Windows.Media.Color"/>. </param>
            <returns>The new <see cref="T:System.Windows.Media.Color"/>. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.RemoveAlpha(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>Removes the transparency from the foreground color using the given background color. </summary>
            <param name="foreground">The foreground <see cref="T:System.Windows.Media.Color"/>. </param>
            <param name="background">The background <see cref="T:System.Windows.Media.Color"/>. </param>
            <returns>The color without transparency. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.ChangeAlpha(System.Windows.Media.Color,System.Byte)">
            <summary>Changes the alpha channel of the <see cref="T:System.Windows.Media.Color"/>. </summary>
            <param name="color">The <see cref="T:System.Windows.Media.Color"/>. </param>
            <param name="alpha">The new alpha value. </param>
            <returns>The new <see cref="T:System.Windows.Media.Color"/>. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.ChangeAlpha(System.Windows.Media.Color,System.String)">
            <summary>Changes the alpha channel of the <see cref="T:System.Windows.Media.Color"/>. </summary>
            <param name="color">The <see cref="T:System.Windows.Media.Color"/>. </param>
            <param name="alpha">The new alpha value. </param>
            <returns>The new <see cref="T:System.Windows.Media.Color"/>. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.ToHex(System.Windows.Media.Color,System.Boolean)">
            <summary>Converts a <see cref="T:System.Windows.Media.Color"/> to HEX string. </summary>
            <param name="color">The <see cref="T:System.Windows.Media.Color"/>. </param>
            <param name="includeAlpha">If false then #RRGGBB, true then #AARRGGBB. </param>
            <returns>The HEX string. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.FromHex(System.String)">
            <summary>Creates a <see cref="T:System.Windows.Media.Color"/> from a HEX value. </summary>
            <param name="colorCode">The HEX in the form #RRGGBB or #AARRGGBB. </param>
            <returns>The <see cref="T:System.Windows.Media.Color"/>. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.FromHex(System.UInt32)">
            <summary>Creates a <see cref="T:System.Windows.Media.Color"/> from a HEX value. </summary>
            <param name="argb">The HEX value. </param>
            <returns>The <see cref="T:System.Windows.Media.Color"/>. </returns>
        </member>
        <member name="T:MyToolkit.Utilities.DependencyObjectExtensions">
            <summary>Provides extension methods for <see cref="T:System.Windows.DependencyObject"/> objects. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.DependencyObjectExtensions.FindVisualChild``1(System.Windows.DependencyObject)">
            <summary>Traverses the visual tree and returns the first child of the desired type. </summary>
            <typeparam name="T">The child type to find. </typeparam>
            <param name="obj">The parent object. </param>
            <returns>The child object. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.DependencyObjectExtensions.FindVisualChildren``1(System.Windows.DependencyObject)">
            <summary>Traverses the visual tree and returns all children of the desired type. </summary>
            <typeparam name="T">The child type to find. </typeparam>
            <param name="obj">The parent object. </param>
            <returns>The children. </returns>
        </member>
        <member name="T:MyToolkit.Utilities.EntityContainer`2">
            <summary>A container to manage entities of a given type.</summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TIdentity">The type of the identity.</typeparam>
        </member>
        <member name="M:MyToolkit.Utilities.EntityContainer`2.Get(`1)">
            <summary>Gets an entity by ID.</summary>
            <returns>The entity.</returns>
        </member>
        <member name="M:MyToolkit.Utilities.EntityContainer`2.Initialize(System.Collections.Generic.IEnumerable{`0})">
            <summary>Initializes the container with some entities.</summary>
            <param name="items">The entities.</param>
        </member>
        <member name="M:MyToolkit.Utilities.EntityContainer`2.Clear">
            <summary>Removes all entities.</summary>
        </member>
        <member name="M:MyToolkit.Utilities.EntityContainer`2.AddRange(System.Collections.Generic.IList{`0})">
            <summary>Adds multiple entities.</summary>
            <param name="items">The entities.</param>
        </member>
        <member name="M:MyToolkit.Utilities.EntityContainer`2.Insert(System.Int32,`0)">
            <summary>Inserts an entity.</summary>
            <param name="position">The position to insert the entity.</param>
            <param name="item">The entity.</param>
        </member>
        <member name="M:MyToolkit.Utilities.EntityContainer`2.Add(`0)">
            <summary>Adds an entity at the end of the collection.</summary>
            <param name="item">The entity.</param>
        </member>
        <member name="M:MyToolkit.Utilities.EntityContainer`2.Remove(`0)">
            <summary>Removes an entity from the collection.</summary>
            <param name="item">The entity.</param>
        </member>
        <member name="M:MyToolkit.Utilities.EntityContainer`2.GenerateIdentity">
            <summary>Generates a new identity string.</summary>
            <returns>The ID string.</returns>
        </member>
        <member name="P:MyToolkit.Utilities.EntityContainer`2.Collection">
            <summary>Gets the entity collection.</summary>
        </member>
        <member name="T:MyToolkit.Utilities.ItemsControlExtensions">
            <summary>Provides extension methods for <see cref="T:System.Windows.Controls.ItemsControl"/> objects. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.ItemsControlExtensions.GetVisibleItems``1(System.Windows.Controls.ItemsControl)">
            <summary>Gets all items of the <see cref="T:System.Windows.Controls.ItemsControl"/> which are currently visible on the screen. </summary>
            <typeparam name="T">The type of the items. </typeparam>
            <param name="itemsControl">The <see cref="T:System.Windows.Controls.ItemsControl"/>. </param>
            <returns>The visible items. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ItemsControlExtensions.GetFirstVisibleItem``1(System.Windows.Controls.ItemsControl)">
            <summary>Gets the first item of the <see cref="T:System.Windows.Controls.ItemsControl"/> which are currently visible on the screen. </summary>
            <typeparam name="T">The type of the item. </typeparam>
            <param name="itemsControl">The <see cref="T:System.Windows.Controls.ItemsControl"/>. </param>
            <returns>The visible item. </returns>
        </member>
        <member name="T:MyToolkit.Utilities.Xml">
            <summary>Provides utility methods for handling XML. </summary>
        </member>
    </members>
</doc>
